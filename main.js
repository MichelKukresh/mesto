(()=>{"use strict";function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}var t=function(){function t(e,n,o,r,i,s,a,u){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),this._name=e,this._link=n,this._likes=o,this._owner=r,this.__id=i,this._api=s,this._handleZoom=a,this._handleClickDelCard=u,this._likeStatus={status:!1,summ:0}}var n,o;return n=t,(o=[{key:"_getTemplate",value:function(){return document.querySelector("#card-template").content.cloneNode(!0).querySelector(".elements__item-list")}},{key:"generateCard",value:function(){return this._element=this._getTemplate(),this._setEventListeners(),this._element.querySelector(".elements__cut-text").textContent=this._name,this._element.querySelector(".elements__image").src=this._link,this._element.querySelector(".elements__image").alt=this._name,"f03d1a7c9876ea4c7fb48341"!=this._owner._id&&this._element.querySelector(".elements__dell").classList.add("elements__dell_none"),this._element.querySelector(".elements__how-like").textContent=this._likes.length,this._likes.findIndex((function(e){return"f03d1a7c9876ea4c7fb48341"==e._id}))>=0?(console.log("Есть"),this._element.querySelector(".elements__hart").classList.add("elements__hart_activ"),this._likeStatus.status=!0,this._likeStatus.summ=this._likes.length):(console.log("Нет"),this._likeStatus.summ=this._likes.length),console.log(this._likeStatus),this._element}},{key:"_handleMessegeClick",value:function(e){0==this._likeStatus.status?(this._likeStatus.status=!0,this._api.putLikeCard(this.__id).then(e.target.classList.toggle("elements__hart_activ")),this._likeStatus.summ++,this._element.querySelector(".elements__how-like").textContent=this._likeStatus.summ):(this._api.deleteLikeCard(this.__id).then(e.target.classList.toggle("elements__hart_activ")),this._likeStatus.status=!1,this._likeStatus.summ--,this._element.querySelector(".elements__how-like").textContent=this._likeStatus.summ)}},{key:"_elementDelete",value:function(){this._handleClickDelCard(this.__id,this._element),console.log(this._handleClickDelCard(this.__id,this._element))}},{key:"_setEventListeners",value:function(){var e=this;this._element.querySelector(".elements__hart").addEventListener("click",(function(t){e._handleMessegeClick(t)})),this._element.querySelector(".elements__dell").addEventListener("click",(function(){e._elementDelete()})),this._element.querySelector(".elements__image").addEventListener("click",(function(t){e._handleZoom(e._name,e._link)}))}}])&&e(n.prototype,o),Object.defineProperty(n,"prototype",{writable:!1}),t}();function n(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var r=function(){function e(t,n){var r=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),o(this,"_handleFormInput",(function(e){var t=e.currentTarget,n=e.target;r._setCustomError(n),r._setFieldError(n),r._toggleButtonState(t)})),o(this,"toggleButtonStateOn",(function(){r._submitButton.classList.add(r._buttonValid),r._submitButton.removeAttribute("disabled")})),o(this,"toggleButtonStateOff",(function(){r._submitButton.classList.remove(r._buttonValid),r._submitButton.setAttribute("disabled","disabled")})),o(this,"_toggleButtonState",(function(e){e.checkValidity()?r.toggleButtonStateOn():r.toggleButtonStateOff()})),this._formSelector=t.formSelector,this._buttonValid=t.buttonValid,this._popup=document.querySelector(n),this._submitButton=this._popup.querySelector(t.submitButtonSelector),this._popupContent=this._popup.querySelector(this._formSelector)}var t,r;return t=e,(r=[{key:"enableValidation",value:function(){this._setEventListeners()}},{key:"_setEventListeners",value:function(){var e=this;this._popupContent.addEventListener("submit",(function(e){e.preventDefault()})),this._popupContent.addEventListener("input",(function(t){e._handleFormInput(t)}))}},{key:"_setCustomError",value:function(e){e.validity,e.setCustomValidity("")}},{key:"_setFieldError",value:function(e){document.querySelector("#".concat(e.id,"-error")).textContent=e.validationMessage}},{key:"resetInputError",value:function(){this._spanOnPopup=this._popup.querySelectorAll("span"),this._spanOnPopup.forEach((function(e){return e.textContent=""}))}}])&&n(t.prototype,r),Object.defineProperty(t,"prototype",{writable:!1}),e}();function i(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}var s=function(){function e(t,n){var o=t.items,r=t.renderer;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._renderedItems=o,this._renderer=r,this._container=document.querySelector(n)}var t,n;return t=e,(n=[{key:"renderItems",value:function(){var e=this;this._renderedItems.forEach((function(t){return e._renderer(t)}))}},{key:"setItem",value:function(e){this._container.prepend(e)}}])&&i(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}();function a(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}var u=function(){function e(t){var n,o,r=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),o=function(e){"Escape"===e.key&&r.close()},(n="_handleEscClose")in this?Object.defineProperty(this,n,{value:o,enumerable:!0,configurable:!0,writable:!0}):this[n]=o,this._popup=document.querySelector(t)}var t,n;return t=e,(n=[{key:"open",value:function(){this._popup.classList.add("popup_is-open"),document.addEventListener("keydown",this._handleEscClose)}},{key:"close",value:function(){this._popup.classList.remove("popup_is-open"),document.removeEventListener("keydown",this._handleEscClose)}},{key:"setEventListeners",value:function(){var e=this;this._popupClose=this._popup.querySelector(".popup__close"),this._popupClose.addEventListener("click",(function(){e.close()})),this._popup.addEventListener("click",(function(t){(t.target.classList.contains("popup")||t.target.classList.contains("popup__close"))&&e.close()}))}}])&&a(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}();function c(e){return c="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},c(e)}function l(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}function p(){return p="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,n){var o=f(e,t);if(o){var r=Object.getOwnPropertyDescriptor(o,t);return r.get?r.get.call(arguments.length<3?e:n):r.value}},p.apply(this,arguments)}function f(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=m(e)););return e}function h(e,t){return h=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e},h(e,t)}function _(e,t){if(t&&("object"===c(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}function m(e){return m=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)},m(e)}var d=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&h(e,t)}(s,e);var t,n,o,r,i=(o=s,r=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=m(o);if(r){var n=m(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return _(this,e)});function s(e,t){var n,o=t.handleFormSubmit;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,s),(n=i.call(this,e))._handleFormSubmit=o,n}return t=s,(n=[{key:"_getInputValues",value:function(){var e=this;return this._formList=this._popup.querySelectorAll("input"),this._formValues={},this._formList.forEach((function(t){return e._formValues[t.name]=t.value})),this._formValues}},{key:"setEventListeners",value:function(){var e=this;p(m(s.prototype),"setEventListeners",this).call(this),this._popupFormSubmit=this._popup.querySelector(".popup__content"),this._buttonInfomationAboutSave=this._popup.querySelector(".popup__save"),this._popupFormSubmit.addEventListener("submit",(function(t){t.preventDefault(),e._handleFormSubmit(e._getInputValues(),e._buttonInfomationAboutSave)}))}},{key:"close",value:function(){p(m(s.prototype),"close",this).call(this),this._popupFormSubmit.reset()}}])&&l(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),s}(u);function y(e){return y="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},y(e)}function v(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}function b(){return b="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,n){var o=g(e,t);if(o){var r=Object.getOwnPropertyDescriptor(o,t);return r.get?r.get.call(arguments.length<3?e:n):r.value}},b.apply(this,arguments)}function g(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=w(e)););return e}function k(e,t){return k=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e},k(e,t)}function S(e,t){if(t&&("object"===y(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}function w(e){return w=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)},w(e)}var E=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&k(e,t)}(s,e);var t,n,o,r,i=(o=s,r=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=w(o);if(r){var n=w(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return S(this,e)});function s(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,s),(t=i.call(this,e))._sizeElementText=t._popup.querySelector("#size-txt-element"),t._sizeElementImg=t._popup.querySelector("#size-image-element"),t}return t=s,(n=[{key:"open",value:function(e,t){b(w(s.prototype),"open",this).call(this),this._sizeElementText.textContent=e,this._sizeElementImg.src=t,this._sizeElementImg.alt=e}}])&&v(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),s}(u);function C(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}var j=function(){function e(t,n){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._professionSelector=n,this._namePopup=document.querySelector(t),this._professionPopup=document.querySelector(this._professionSelector)}var t,n;return t=e,n=[{key:"getUserInfo",value:function(){return{nameProfile:this._namePopup.textContent,professionProfile:this._professionPopup.textContent}}},{key:"setUserInfo",value:function(e,t){this._namePopup.textContent=e,this._professionPopup.textContent=t}}],n&&C(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}();function O(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}var P=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._baseUrl=t.baseUrl,this._headers=t.headers}var t,n;return t=e,(n=[{key:"getInitialCards",value:function(){return fetch(this._baseUrl,{method:"GET",headers:this._headers}).then((function(e){return e.ok?e.json():Promise.reject("Ошибка: ".concat(e.status))}))}},{key:"getInitialUser",value:function(){return fetch(this._baseUrl,{method:"GET",headers:this._headers}).then((function(e){return e.ok?e.json():Promise.reject("Ошибка: ".concat(e.status))}))}},{key:"patchUserInfoNameAbout",value:function(e,t){return fetch("https://mesto.nomoreparties.co/v1/cohort-41/users/me",{method:"PATCH",headers:{authorization:"06950c87-f349-452d-a6bd-e523931209ac","Content-Type":"application/json"},body:JSON.stringify({name:e,about:t})}).then((function(e){return e.ok?e.json():Promise.reject("Ошибка: ".concat(e.status))}))}},{key:"postCard",value:function(e,t){return fetch("https://mesto.nomoreparties.co/v1/cohort-41/cards",{method:"POST",headers:{authorization:"06950c87-f349-452d-a6bd-e523931209ac","Content-Type":"application/json"},body:JSON.stringify({name:e,link:t})}).then((function(e){return e.ok?e.json():Promise.reject("Ошибка: ".concat(e.status))}))}},{key:"deleteCard",value:function(e){return fetch("https://mesto.nomoreparties.co/v1/cohort-41/cards/".concat(e),{method:"DELETE",headers:{authorization:"06950c87-f349-452d-a6bd-e523931209ac","Content-Type":"application/json"}}).then((function(e){return e.ok?e.json():Promise.reject("Ошибка: ".concat(e.status))}))}},{key:"putLikeCard",value:function(e){return fetch("https://mesto.nomoreparties.co/v1/cohort-41/cards/".concat(e,"/likes"),{method:"PUT",headers:{authorization:"06950c87-f349-452d-a6bd-e523931209ac","Content-Type":"application/json"}}).then((function(e){return e.ok?e.json():Promise.reject("Ошибка: ".concat(e.status))}))}},{key:"deleteLikeCard",value:function(e){return fetch("https://mesto.nomoreparties.co/v1/cohort-41/cards/".concat(e,"/likes"),{method:"DELETE",headers:{authorization:"06950c87-f349-452d-a6bd-e523931209ac","Content-Type":"application/json"}}).then((function(e){return e.ok?e.json():Promise.reject("Ошибка: ".concat(e.status))}))}},{key:"patchAvatar",value:function(e){return fetch("https://mesto.nomoreparties.co/v1/cohort-41/users/me/avatar",{method:"PATCH",headers:{authorization:"06950c87-f349-452d-a6bd-e523931209ac","Content-Type":"application/json"},body:JSON.stringify({avatar:e})}).then((function(e){return e.ok?e.json():Promise.reject("Ошибка: ".concat(e.status))}))}}])&&O(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}(),L=".popup_type_edit-profile",q=".popup_type_new-card",T=".popup_type_sure-del",I=".popup_type_changl-avatar",x=document.querySelector(".profile__button-open"),B=document.querySelector(".profile__button-add-site"),R=document.querySelector(".profile__image"),V=document.querySelector("#popup-input-name"),U=document.querySelector("#popup-input-profession"),z=(document.querySelector("#popup-card-input-site"),document.querySelector("#popup-card-input-src"),new d(L,{handleFormSubmit:function(e,t){var n=e.name,o=e.profession;F.setUserInfo(n,o);var r=ne.patchUserInfoNameAbout(n,o);console.log(r),console.log(t),t.textContent="Сохранение...",r.then((function(){return z.close()})).then((function(){return t.textContent="Сохранить"})).catch((function(e){console.log(e)}))}}));z.setEventListeners();var F=new j(".profile__name",".profile__profession");x.addEventListener("click",(function(){var e;z.open(),K.resetInputError(),e=F.getUserInfo(),V.value=e.nameProfile,U.value=e.professionProfile}));var D=new d(q,{handleFormSubmit:function(e,t){var n=e.name,o=e.link;t.textContent="Сохранение...";var r=n,i=o;ne.postCard(r,i).then((function(e){var t=Y(e.name,e.link,e.likes,e.owner,e._id,ne);ee.setItem(t),Q.toggleButtonStateOff()})).then((function(){return D.close()})).then((function(){return t.textContent="Сохранить"})).catch((function(e){console.log(e)}))}});D.setEventListeners(),B.addEventListener("click",(function(){D.open(),Q.resetInputError()}));var A,N=new E(".popup_type_image");function J(e,t){N.open(e,t),N.setEventListeners()}function M(e,t){return G.open(),A={id:e,element:t}}var G=new d(T,{handleFormSubmit:function(){ne.deleteCard(A.id).then((function(){return A.element.remove()})).then((function(){return G.close()})).catch((function(e){console.log(e)})),console.log("Проверка работает?")}});G.setEventListeners(),R.addEventListener("click",(function(){H.open(),X.resetInputError()}));var H=new d(I,{handleFormSubmit:function(e,t){var n=e.link;t.textContent="Сохранение...";var o=n;te.patchAvatar(n).then((function(){return document.querySelector(".profile__image").src=n})).then((function(){return H.close()})).then((function(){return t.textContent="Сохранить"})).catch((function(e){console.log(e)})),console.log(o),console.log("Проверка работает замена аватара?")}});H.setEventListeners();var Z={formSelector:".popup__content",buttonValid:"popup__save_valid",submitButtonSelector:".popup__save"},K=new r(Z,L);K.enableValidation();var Q=new r(Z,q);Q.enableValidation();var W=new r(Z,T);W.enableValidation(),W.toggleButtonStateOn();var X=new r(Z,I);function Y(e,n,o,r,i,s){return new t(e,n,o,r,i,s,J,M).generateCard()}X.enableValidation();var $=".elements__item",ee=new s({},$),te=new P({baseUrl:"https://mesto.nomoreparties.co/v1/cohort-41/users/me",headers:{authorization:"06950c87-f349-452d-a6bd-e523931209ac","Content-Type":"application/json"}});te.getInitialUser().then((function(e){F.setUserInfo(e.name,e.about),document.querySelector(".profile__image").src=e.avatar}));var ne=new P({baseUrl:"https://mesto.nomoreparties.co/v1/cohort-41/cards",headers:{authorization:"06950c87-f349-452d-a6bd-e523931209ac","Content-Type":"application/json"}});ne.getInitialCards().then((function(e){var t=new s({items:e,renderer:function(e){var n=Y(e.name,e.link,e.likes,e.owner,e._id,ne);t.setItem(n)}},$);t.renderItems()})).catch((function(e){console.log(e)}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,