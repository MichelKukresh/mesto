/*! For license information please see main.js.LICENSE.txt */
(()=>{"use strict";function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var t=function(){function t(e,n,r,o,i,a,u,s,c,l){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),this._name=e,this._link=n,this._likes=r,this._owner=o,this.__id=i,this._api=a,this._handleZoom=s,this._myId=u,this._handleClickDelCard=c,this._handleCardClickHeart=l,this._likeStatus={status:!1}}var n,r;return n=t,(r=[{key:"_getTemplate",value:function(){return document.querySelector("#card-template").content.cloneNode(!0).querySelector(".elements__item-list")}},{key:"setTheNumberOfLikes",value:function(e){this._element.querySelector(".elements__how-like").textContent=e}},{key:"generateCard",value:function(){var e=this;return this._element=this._getTemplate(),this._setEventListeners(),this._element.querySelector(".elements__cut-text").textContent=this._name,this._element.querySelector(".elements__image").src=this._link,this._element.querySelector(".elements__image").alt=this._name,this._owner._id!=this._myId&&this._element.querySelector(".elements__dell").classList.add("elements__dell_none"),this.setTheNumberOfLikes(this._likes.length),this._likes.findIndex((function(t){return t._id==e._myId}))>=0&&(this._element.querySelector(".elements__hart").classList.add("elements__hart_activ"),this._likeStatus.status=!0),this._element}},{key:"_handleMessegeClick",value:function(e){0==this._likeStatus.status?(this._handleCardClickHeart(this.__id,this._likeStatus.status,this._element),this._likeStatus.status=!0,e.target.classList.toggle("elements__hart_activ")):(this._handleCardClickHeart(this.__id,this._likeStatus.status,this._element),e.target.classList.toggle("elements__hart_activ"),this._likeStatus.status=!1)}},{key:"deleteCsrdOnSite",value:function(e){e.remove()}},{key:"_elementDelete",value:function(){this._handleClickDelCard(this.__id,this._element,this.deleteCsrdOnSite)}},{key:"_setEventListeners",value:function(){var e=this;this._element.querySelector(".elements__hart").addEventListener("click",(function(t){e._handleMessegeClick(t)})),this._element.querySelector(".elements__dell").addEventListener("click",(function(){e._elementDelete()})),this._element.querySelector(".elements__image").addEventListener("click",(function(t){e._handleZoom(e._name,e._link)}))}}])&&e(n.prototype,r),Object.defineProperty(n,"prototype",{writable:!1}),t}();function n(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var o=function(){function e(t,n){var o=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),r(this,"_handleFormInput",(function(e){var t=e.currentTarget,n=e.target;o._setCustomError(n),o._setFieldError(n),o._toggleButtonState(t)})),r(this,"toggleButtonStateOn",(function(){o._submitButton.classList.add(o._buttonValid),o._submitButton.removeAttribute("disabled")})),r(this,"toggleButtonStateOff",(function(){o._submitButton.classList.remove(o._buttonValid),o._submitButton.setAttribute("disabled","disabled")})),r(this,"_toggleButtonState",(function(e){e.checkValidity()?o.toggleButtonStateOn():o.toggleButtonStateOff()})),this._formSelector=t.formSelector,this._buttonValid=t.buttonValid,this._popup=document.querySelector(n),this._submitButton=this._popup.querySelector(t.submitButtonSelector),this._popupContent=this._popup.querySelector(this._formSelector)}var t,o;return t=e,(o=[{key:"enableValidation",value:function(){this._setEventListeners()}},{key:"_setEventListeners",value:function(){var e=this;this._popupContent.addEventListener("submit",(function(e){e.preventDefault()})),this._popupContent.addEventListener("input",(function(t){e._handleFormInput(t)}))}},{key:"_setCustomError",value:function(e){e.validity,e.setCustomValidity("")}},{key:"_setFieldError",value:function(e){document.querySelector("#".concat(e.id,"-error")).textContent=e.validationMessage}},{key:"resetInputError",value:function(){this._spanOnPopup=this._popup.querySelectorAll("span"),this._spanOnPopup.forEach((function(e){return e.textContent=""}))}}])&&n(t.prototype,o),Object.defineProperty(t,"prototype",{writable:!1}),e}();function i(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var a=function(){function e(t,n){var r=t.renderer;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._renderer=r,this._container=document.querySelector(n)}var t,n;return t=e,(n=[{key:"renderItems",value:function(e){var t=this;e.forEach((function(e){return t._renderer(e)}))}},{key:"setItem",value:function(e){this._container.prepend(e)}}])&&i(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}();function u(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var s=function(){function e(t){var n,r,o=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),r=function(e){"Escape"===e.key&&o.close()},(n="_handleEscClose")in this?Object.defineProperty(this,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):this[n]=r,this._popup=document.querySelector(t)}var t,n;return t=e,(n=[{key:"open",value:function(){this._popup.classList.add("popup_is-open"),document.addEventListener("keydown",this._handleEscClose)}},{key:"close",value:function(){this._popup.classList.remove("popup_is-open"),document.removeEventListener("keydown",this._handleEscClose)}},{key:"setEventListeners",value:function(){var e=this;this._popupClose=this._popup.querySelector(".popup__close"),this._popupClose.addEventListener("click",(function(){e.close()})),this._popup.addEventListener("click",(function(t){(t.target.classList.contains("popup")||t.target.classList.contains("popup__close"))&&e.close()}))}}])&&u(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}();function c(e){return c="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},c(e)}function l(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function f(){return f="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,n){var r=p(e,t);if(r){var o=Object.getOwnPropertyDescriptor(r,t);return o.get?o.get.call(arguments.length<3?e:n):o.value}},f.apply(this,arguments)}function p(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=d(e)););return e}function h(e,t){return h=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e},h(e,t)}function _(e,t){if(t&&("object"===c(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}function d(e){return d=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)},d(e)}var y=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&h(e,t)}(a,e);var t,n,r,o,i=(r=a,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=d(r);if(o){var n=d(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return _(this,e)});function a(e,t){var n,r=t.handleFormSubmit;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,a),(n=i.call(this,e))._handleFormSubmit=r,n}return t=a,(n=[{key:"_getInputValues",value:function(){var e=this;return this._formList=this._popup.querySelectorAll("input"),this._formValues={},this._formList.forEach((function(t){return e._formValues[t.name]=t.value})),this._formValues}},{key:"setSubmitAtion",value:function(e){this._handleSubmitCallBack=e}},{key:"setEventListeners",value:function(){var e=this;f(d(a.prototype),"setEventListeners",this).call(this),this._popupFormSubmit=this._popup.querySelector(".popup__content"),this._buttonInfomationAboutSave=this._popup.querySelector(".popup__save"),this._popupFormSubmit.addEventListener("submit",(function(t){t.preventDefault(),e._handleFormSubmit(e._getInputValues(),e._buttonInfomationAboutSave,e._handleSubmitCallBack)}))}},{key:"close",value:function(){f(d(a.prototype),"close",this).call(this),this._popupFormSubmit.reset()}}])&&l(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),a}(s);function m(e){return m="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},m(e)}function v(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function b(){return b="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,n){var r=g(e,t);if(r){var o=Object.getOwnPropertyDescriptor(r,t);return o.get?o.get.call(arguments.length<3?e:n):o.value}},b.apply(this,arguments)}function g(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=w(e)););return e}function k(e,t){return k=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e},k(e,t)}function S(e,t){if(t&&("object"===m(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}function w(e){return w=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)},w(e)}var C=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&k(e,t)}(a,e);var t,n,r,o,i=(r=a,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=w(r);if(o){var n=w(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return S(this,e)});function a(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,a),(t=i.call(this,e))._sizeElementText=t._popup.querySelector("#size-txt-element"),t._sizeElementImg=t._popup.querySelector("#size-image-element"),t}return t=a,(n=[{key:"open",value:function(e,t){b(w(a.prototype),"open",this).call(this),this._sizeElementText.textContent=e,this._sizeElementImg.src=t,this._sizeElementImg.alt=e}}])&&v(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),a}(s);function E(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var O=function(){function e(t,n){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._professionSelector=n,this._namePopup=document.querySelector(t),this._professionPopup=document.querySelector(this._professionSelector),this._avatar=document.querySelector(".profile__image")}var t,n;return t=e,n=[{key:"getUserInfo",value:function(){return{nameProfile:this._namePopup.textContent,professionProfile:this._professionPopup.textContent}}},{key:"setUserInfo",value:function(e,t){this._namePopup.textContent=e,this._professionPopup.textContent=t}},{key:"setUserAvatar",value:function(e){this._avatar.src=e}}],n&&E(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}();function j(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var P=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._baseUrl=t.baseUrl,this._headers=t.headers}var t,n;return t=e,(n=[{key:"getInitialCards",value:function(){return fetch("".concat(this._baseUrl,"cards"),{method:"GET",headers:this._headers}).then((function(e){return e.ok?e.json():Promise.reject("Ошибка: ".concat(e.status))}))}},{key:"getInitialUser",value:function(){return fetch("".concat(this._baseUrl,"users/me"),{method:"GET",headers:this._headers}).then((function(e){return e.ok?e.json():Promise.reject("Ошибка: ".concat(e.status))}))}},{key:"patchUserInfoNameAbout",value:function(e,t){return fetch("".concat(this._baseUrl,"users/me"),{method:"PATCH",headers:this._headers,body:JSON.stringify({name:e,about:t})}).then((function(e){return e.ok?e.json():Promise.reject("Ошибка: ".concat(e.status))}))}},{key:"postCard",value:function(e,t){return fetch("".concat(this._baseUrl,"cards"),{method:"POST",headers:this._headers,body:JSON.stringify({name:e,link:t})}).then((function(e){return e.ok?e.json():Promise.reject("Ошибка: ".concat(e.status))}))}},{key:"deleteCard",value:function(e){return fetch("".concat(this._baseUrl,"cards/").concat(e),{method:"DELETE",headers:this._headers}).then((function(e){return e.ok?e.json():Promise.reject("Ошибка: ".concat(e.status))}))}},{key:"getOneCard",value:function(e){return fetch("".concat(this._baseUrl,"cards/").concat(e),{method:"GET",headers:this._headers}).then((function(e){return e.ok?e.json():Promise.reject("Ошибка: ".concat(e.status))}))}},{key:"putLikeCard",value:function(e){return fetch("".concat(this._baseUrl,"cards/likes/").concat(e),{method:"PUT",headers:this._headers}).then((function(e){return e.ok?e.json():Promise.reject("Ошибка: ".concat(e.status))}))}},{key:"deleteLikeCard",value:function(e){return fetch("".concat(this._baseUrl,"cards/likes/").concat(e),{method:"DELETE",headers:this._headers}).then((function(e){return e.ok?e.json():Promise.reject("Ошибка: ".concat(e.status))}))}},{key:"patchAvatar",value:function(e){return fetch("".concat(this._baseUrl,"users/me/avatar"),{method:"PATCH",headers:this._headers,body:JSON.stringify({avatar:e})}).then((function(e){return e.ok?e.json():Promise.reject("Ошибка: ".concat(e.status))}))}}])&&j(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}(),L={formSelector:".popup__content",buttonValid:"popup__save_valid",submitButtonSelector:".popup__save"},q=".popup_type_edit-profile",I=".popup_type_new-card",T=".popup_type_sure-del",x=".popup_type_changl-avatar",U=document.querySelector(".profile__button-open"),A=document.querySelector(".profile__button-add-site"),B=document.querySelector(".profile__image"),R=document.querySelector("#popup-input-name"),V=document.querySelector("#popup-input-profession");function F(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}document.querySelector("#popup-card-input-site"),document.querySelector("#popup-card-input-src");var D=new y(q,{handleFormSubmit:function(e,t){var n=e.name,r=e.profession,o=re.patchUserInfoNameAbout(n,r);t.textContent="Сохранение...",o.then((function(){z.setUserInfo(n,r)})).then((function(){return D.close()})).catch((function(e){console.log(e)})).finally((function(){return t.textContent="Сохранить"}))}});D.setEventListeners();var z=new O(".profile__name",".profile__profession");U.addEventListener("click",(function(){var e;D.open(),Q.resetInputError(),e=z.getUserInfo(),R.value=e.nameProfile,V.value=e.professionProfile}));var N=new y(I,{handleFormSubmit:function(e,t){var n=e.name,r=e.link;t.textContent="Сохранение...";var o=n,i=r;re.postCard(o,i).then((function(e){var t=ee(e.name,e.link,e.likes,e.owner,e._id,re);ne.setItem(t),W.toggleButtonStateOff()})).then((function(){return N.close()})).catch((function(e){console.log(e)})).finally((function(){return t.textContent="Сохранить"}))}});N.setEventListeners(),A.addEventListener("click",(function(){N.open(),W.resetInputError()}));var H,M=new C(".popup_type_image");function G(e,t){M.open(e,t)}function J(e,t,n){return $.open(),$.setSubmitAtion(n),H={id:e,element:t}}function Z(e,t,n){0==this._likeStatus.status?re.putLikeCard(e).then((function(e){return e.likes.length})).then((function(e){n.querySelector(".elements__how-like").textContent=e})):re.deleteLikeCard(e).then((function(e){return e.likes.length})).then((function(e){n.querySelector(".elements__how-like").textContent=e}))}M.setEventListeners();var $=new y(T,{handleFormSubmit:function(e,t,n){re.deleteCard(H.id).then((function(){return n(H.element)})).then((function(){return $.close()})).catch((function(e){console.log(e)}))}});$.setEventListeners(),B.addEventListener("click",(function(){K.open(),Y.resetInputError()}));var K=new y(x,{handleFormSubmit:function(e,t){var n=e.link;t.textContent="Сохранение...",re.patchAvatar(n).then((function(){return z.setUserAvatar(n)})).then((function(){Y.toggleButtonStateOff(),K.close()})).catch((function(e){console.log(e)})).finally((function(){return t.textContent="Сохранить"}))}});K.setEventListeners();var Q=new o(L,q);Q.enableValidation();var W=new o(L,I);W.enableValidation();var X=new o(L,T);X.enableValidation(),X.toggleButtonStateOn();var Y=new o(L,x);function ee(e,n,r,o,i,a){return new t(e,n,r,o,i,a,"f03d1a7c9876ea4c7fb48341",G,J,Z).generateCard()}Y.enableValidation(),new t;var te=".elements__item",ne=new a({},te),re=new P({baseUrl:"https://mesto.nomoreparties.co/v1/cohort-41/",headers:{authorization:"06950c87-f349-452d-a6bd-e523931209ac","Content-Type":"application/json"}});Promise.all([re.getInitialUser(),re.getInitialCards()]).then((function(e){var t,n,r=(n=2,function(e){if(Array.isArray(e))return e}(t=e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,i=[],a=!0,u=!1;try{for(n=n.call(e);!(a=(r=n.next()).done)&&(i.push(r.value),!t||i.length!==t);a=!0);}catch(e){u=!0,o=e}finally{try{a||null==n.return||n.return()}finally{if(u)throw o}}return i}}(t,n)||function(e,t){if(e){if("string"==typeof e)return F(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?F(e,t):void 0}}(t,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),o=r[0],i=r[1];z.setUserInfo(o.name,o.about),z.setUserAvatar(o.avatar);var u=new a({renderer:function(e){var t=ee(e.name,e.link,e.likes,e.owner,e._id,re);u.setItem(t)}},te);u.renderItems(i)})).catch((function(e){console.log(e)}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi5qcyIsIm1hcHBpbmdzIjoiOzZMQUFNQSxFQUFBQSxXQUdKLFdBQ0VDLEVBQ0FDLEVBQ0FDLEVBQ0FDLEVBQ0FDLEVBQ0FDLEVBQ0FDLEVBQ0FDLEVBQ0FDLEVBQ0FDLGdHQUNBLFNBQ0FDLEtBQUtDLE1BQVFYLEVBQ2JVLEtBQUtFLE1BQVFYLEVBQ2JTLEtBQUtHLE9BQVNYLEVBQ2RRLEtBQUtJLE9BQVNYLEVBQ2RPLEtBQUtLLEtBQU9YLEVBQ1pNLEtBQUtNLEtBQU9YLEVBQ1pLLEtBQUtPLFlBQWNWLEVBQ25CRyxLQUFLUSxNQUFRWixFQUNiSSxLQUFLUyxvQkFBc0JYLEVBQzNCRSxLQUFLVSxzQkFBd0JYLEVBQzdCQyxLQUFLVyxZQUFjLENBQ2pCQyxRQUFRLG9EQU1aLFdBTUUsT0FKcUJDLFNBQ2xCQyxjQUFjLGtCQUNkQyxRQUFRQyxXQUFVLEdBRURGLGNBQWMsMkRBSXBDLFNBQW9CRyxHQUNsQmpCLEtBQUtrQixTQUFTSixjQUFjLHVCQUF1QkssWUFBY0YsOEJBR25FLFdBQWUsV0E4QmIsT0EzQkFqQixLQUFLa0IsU0FBV2xCLEtBQUtvQixlQUNyQnBCLEtBQUtxQixxQkFDTHJCLEtBQUtrQixTQUFTSixjQUFjLHVCQUF1QkssWUFBY25CLEtBQUtDLE1BRXRFRCxLQUFLa0IsU0FBU0osY0FBYyxvQkFBb0JRLElBQU10QixLQUFLRSxNQUUzREYsS0FBS2tCLFNBQVNKLGNBQWMsb0JBQW9CUyxJQUFNdkIsS0FBS0MsTUFHdkRELEtBQUtJLE9BQU9WLEtBQU9NLEtBQUtRLE9BQzFCUixLQUFLa0IsU0FDRkosY0FBYyxtQkFDZFUsVUFBVUMsSUFBSSx1QkFJbkJ6QixLQUFLMEIsb0JBQW9CMUIsS0FBS0csT0FBT2MsUUFHakNqQixLQUFLRyxPQUFPd0IsV0FBVSxTQUFDQyxHQUFELE9BQVVBLEVBQUtsQyxLQUFPLEVBQUtjLFVBQVUsSUFDN0RSLEtBQUtrQixTQUNGSixjQUFjLG1CQUNkVSxVQUFVQyxJQUFJLHdCQUNqQnpCLEtBQUtXLFlBQVlDLFFBQVMsR0FJckJaLEtBQUtrQiw0Q0FJZCxTQUFvQlcsR0FFYSxHQUEzQjdCLEtBQUtXLFlBQVlDLFFBQ25CWixLQUFLVSxzQkFDSFYsS0FBS0ssS0FDTEwsS0FBS1csWUFBWUMsT0FDakJaLEtBQUtrQixVQUdQbEIsS0FBS1csWUFBWUMsUUFBUyxFQUUxQmlCLEVBQUlDLE9BQU9OLFVBQVVPLE9BQU8sMEJBRTVCL0IsS0FBS1Usc0JBQ0hWLEtBQUtLLEtBQ0xMLEtBQUtXLFlBQVlDLE9BQ2pCWixLQUFLa0IsVUFHUFcsRUFBSUMsT0FBT04sVUFBVU8sT0FBTyx3QkFFNUIvQixLQUFLVyxZQUFZQyxRQUFTLG1DQUk5QixTQUFpQm9CLEdBQ2ZBLEVBQUtDLHVDQUlQLFdBQ0VqQyxLQUFLUyxvQkFBb0JULEtBQUtLLEtBQU1MLEtBQUtrQixTQUFVbEIsS0FBS2tDLG9EQUcxRCxXQUFxQixXQUVuQmxDLEtBQUtrQixTQUNGSixjQUFjLG1CQUNkcUIsaUJBQWlCLFNBQVMsU0FBQ04sR0FDMUIsRUFBS08sb0JBQW9CUCxNQUc3QjdCLEtBQUtrQixTQUNGSixjQUFjLG1CQUNkcUIsaUJBQWlCLFNBQVMsV0FDekIsRUFBS0Usb0JBR1RyQyxLQUFLa0IsU0FDRkosY0FBYyxvQkFDZHFCLGlCQUFpQixTQUFTLFNBQUNHLEdBQzFCLEVBQUsvQixZQUFZLEVBQUtOLE1BQU8sRUFBS0MscUZBbklwQ2IscVNDQUFrRCxFQUFBQSxXQUNKLFdBQVlDLEVBQWtCQyxHQUFPLDRJQWFsQixTQUFDQyxHQUNsQixJQUFNQyxFQUFPRCxFQUFNRSxjQUNiQyxFQUFRSCxFQUFNWixPQUVwQixFQUFLZ0IsZ0JBQWdCRCxHQUVyQixFQUFLRSxlQUFlRixHQUVwQixFQUFLRyxtQkFBbUJMLE1BckJXLDhCQTRDZixXQUNwQixFQUFLTSxjQUFjekIsVUFBVUMsSUFBSSxFQUFLeUIsY0FDdEMsRUFBS0QsY0FBY0UsZ0JBQWdCLGVBOUNBLCtCQWlEZCxXQUNyQixFQUFLRixjQUFjekIsVUFBVVMsT0FBTyxFQUFLaUIsY0FDekMsRUFBS0QsY0FBY0csYUFBYSxXQUFZLGVBbkRULDZCQXVEaEIsU0FBQ1QsR0FDSkEsRUFBS1UsZ0JBRW5CLEVBQUtDLHNCQUVMLEVBQUtDLDBCQTNEUHZELEtBQUt3RCxjQUFnQmhCLEVBQWlCaUIsYUFDdEN6RCxLQUFLa0QsYUFBZVYsRUFBaUJrQixZQUVyQzFELEtBQUsyRCxPQUFTOUMsU0FBU0MsY0FBYzJCLEdBQ3JDekMsS0FBS2lELGNBQWlCakQsS0FBSzJELE9BQU83QyxjQUFjMEIsRUFBaUJvQixzQkFDakU1RCxLQUFLNkQsY0FBZ0I3RCxLQUFLMkQsT0FBTzdDLGNBQWNkLEtBQUt3RCxvRUFHdEQsV0FDRXhELEtBQUtxQix1REFjUCxXQUFxQixXQUNuQnJCLEtBQUs2RCxjQUFjMUIsaUJBQWlCLFVBQVUsU0FBQ04sR0FDN0NBLEVBQUlpQyxvQkFFTjlELEtBQUs2RCxjQUFjMUIsaUJBQWlCLFNBQVMsU0FBQ08sR0FDNUMsRUFBS3FCLGlCQUFpQnJCLHFDQUkxQixTQUFnQkcsR0FFR0EsRUFBTW1CLFNBQ3ZCbkIsRUFBTW9CLGtCQUFrQixrQ0FHMUIsU0FBZXBCLEdBQ0FoQyxTQUFTQyxjQUFULFdBQTJCK0IsRUFBTXFCLEdBQWpDLFdBQ1IvQyxZQUFjMEIsRUFBTXNCLGlEQXdCM0IsV0FDRW5FLEtBQUtvRSxhQUFlcEUsS0FBSzJELE9BQU9VLGlCQUFpQixRQUNqRHJFLEtBQUtvRSxhQUFhRSxTQUFRLFNBQUNDLEdBQUQsT0FBV0EsRUFBTXBELFlBQWMsaUZBcEV2RG9CLDZLQ0FlaUMsRUFBQUEsV0FDakIsYUFBd0JDLEdBQVUsSUFBckJDLEVBQXFCLEVBQXJCQSxzR0FBcUIsU0FDOUIxRSxLQUFLMkUsVUFBWUQsRUFDakIxRSxLQUFLNEUsV0FBYS9ELFNBQVNDLGNBQWMyRCxtREFHN0MsU0FBWTdDLEdBQU0sV0FDZEEsRUFBSzBDLFNBQVEsU0FBQTFDLEdBQUksT0FBSSxFQUFLK0MsVUFBVS9DLDZCQUd4QyxTQUFRaUQsR0FDSjdFLEtBQUs0RSxXQUFXRSxRQUFRRCw4RUFYWEwsNktDQUFPLEVBQUFBLFdBRW5CLFdBQVlDLEdBQWUsdUhBZ0JULFNBQUN0QyxHQUVDLFdBQWRBLEVBQU11QyxLQUNSLEVBQUtDLFlBbkJrQixzSEFDekJsRixLQUFLMkQsT0FBUzlDLFNBQVNDLGNBQWNrRSw0Q0FHdkMsV0FFRWhGLEtBQUsyRCxPQUFPbkMsVUFBVUMsSUFBSSxpQkFDMUJaLFNBQVNzQixpQkFBaUIsVUFBV25DLEtBQUttRixzQ0FHNUMsV0FFRW5GLEtBQUsyRCxPQUFPbkMsVUFBVVMsT0FBTyxpQkFDN0JwQixTQUFTdUUsb0JBQW9CLFVBQVdwRixLQUFLbUYsa0RBVS9DLFdBQW9CLFdBR2xCbkYsS0FBS3FGLFlBQWNyRixLQUFLMkQsT0FBTzdDLGNBQWMsaUJBQzdDZCxLQUFLcUYsWUFBWWxELGlCQUFpQixTQUFTLFdBQ3pDLEVBQUsrQyxXQUlQbEYsS0FBSzJELE9BQU94QixpQkFBaUIsU0FBUyxTQUFDTixJQUVuQ0EsRUFBSUMsT0FBT04sVUFBVThELFNBQVMsVUFDOUJ6RCxFQUFJQyxPQUFPTixVQUFVOEQsU0FBUyxrQkFFOUIsRUFBS0osc0ZBdkNRSCxrdUNDRUFRLEVBQUFBLFNBQUFBLGlzQkFDbkIsV0FBWVAsRUFBWixHQUFpRCxNQUFwQlEsRUFBb0IsRUFBcEJBLGlCQUFvQiw2R0FFL0MsY0FBTVIsSUFFRFMsa0JBQW9CRCxFQUpzQiw4Q0FPakQsV0FBa0IsV0FNaEIsT0FMQXhGLEtBQUswRixVQUFZMUYsS0FBSzJELE9BQU9VLGlCQUFpQixTQUM5Q3JFLEtBQUsyRixZQUFjLEdBQ25CM0YsS0FBSzBGLFVBQVVwQixTQUNiLFNBQUN6QixHQUFELE9BQVksRUFBSzhDLFlBQVk5QyxFQUFNdkQsTUFBUXVELEVBQU0rQyxTQUU1QzVGLEtBQUsyRiwwQ0FHZCxTQUFlRSxHQUViN0YsS0FBSzhGLHNCQUF3QkQsbUNBRy9CLFdBQW9CLFdBQ2xCLHNEQUNBN0YsS0FBSytGLGlCQUFtQi9GLEtBQUsyRCxPQUFPN0MsY0FBYyxtQkFFbERkLEtBQUtnRywyQkFBNkJoRyxLQUFLMkQsT0FBTzdDLGNBQWMsZ0JBQzVEZCxLQUFLK0YsaUJBQWlCNUQsaUJBQWlCLFVBQVUsU0FBQ04sR0FDaERBLEVBQUlpQyxpQkFFSixFQUFLMkIsa0JBQ0gsRUFBS1Esa0JBQ0wsRUFBS0QsMkJBQ0wsRUFBS0YsK0NBS1gsV0FDRSwwQ0FDQTlGLEtBQUsrRixpQkFBaUJHLG1GQXhDTFgsQ0FBc0JSLGt1Q0NBdEJvQixFQUFBQSxTQUFBQSxpc0JBQ25CLFdBQVluQixHQUFlLG1IQUN6QixjQUFNQSxJQUNEb0IsaUJBQW1CLEVBQUt6QyxPQUFPN0MsY0FBYyxxQkFDbEQsRUFBS3VGLGdCQUFrQixFQUFLMUMsT0FBTzdDLGNBQWMsdUJBSHhCLG1DQU0zQixTQUFLeEIsRUFBTUMsR0FDVCx5Q0FDQVMsS0FBS29HLGlCQUFpQmpGLFlBQWM3QixFQUNwQ1UsS0FBS3FHLGdCQUFnQi9FLElBQU0vQixFQUMzQlMsS0FBS3FHLGdCQUFnQjlFLElBQU1qQyw2RUFYVjZHLENBQXVCcEIsNktDRnZCdUIsRUFBQUEsV0FDbkIsV0FBWUMsRUFBY0MsZ0dBQW9CLFNBRTVDeEcsS0FBS3lHLG9CQUFzQkQsRUFDM0J4RyxLQUFLMEcsV0FBYTdGLFNBQVNDLGNBQWN5RixHQUN6Q3ZHLEtBQUsyRyxpQkFBbUI5RixTQUFTQyxjQUFjZCxLQUFLeUcscUJBQ3BEekcsS0FBSzRHLFFBQVUvRixTQUFTQyxjQUFjLGtFQUd4QyxXQUVFLE1BQU8sQ0FDTCtGLFlBQWE3RyxLQUFLMEcsV0FBV3ZGLFlBQzdCMkYsa0JBQW1COUcsS0FBSzJHLGlCQUFpQnhGLHdDQUk3QyxTQUFZNEYsRUFBV0MsR0FFckJoSCxLQUFLMEcsV0FBV3ZGLFlBQWM0RixFQUM5Qi9HLEtBQUsyRyxpQkFBaUJ4RixZQUFjNkYsK0JBSXRDLFNBQWVDLEdBQ2JqSCxLQUFLNEcsUUFBUXRGLElBQU0yRiw4RUF6QkZYLDZLQ0FmWSxFQUFBQSxXQUNKLFdBQVlDLGdHQUFRLFNBQ2xCbkgsS0FBS29ILFNBQVdELEVBQU9FLFFBQ3ZCckgsS0FBS3NILFNBQVdILEVBQU9JLDREQUl6QixXQUNFLE9BQU9DLE1BQU0sR0FBRCxPQUFJeEgsS0FBS29ILFNBQVQsU0FBMEIsQ0FDcENLLE9BQVEsTUFDUkYsUUFBU3ZILEtBQUtzSCxXQUNiSSxNQUFLLFNBQUNDLEdBQ1AsT0FBSUEsRUFBSUMsR0FDQ0QsRUFBSUUsT0FHTkMsUUFBUUMsT0FBUixrQkFBMEJKLEVBQUkvRywwQ0FLekMsV0FDRSxPQUFPNEcsTUFBTSxHQUFELE9BQUl4SCxLQUFLb0gsU0FBVCxZQUE2QixDQUd2Q0ssT0FBUSxNQUNSRixRQUFTdkgsS0FBS3NILFdBQ2JJLE1BQUssU0FBQ0MsR0FDUCxPQUFJQSxFQUFJQyxHQUNDRCxFQUFJRSxPQUdOQyxRQUFRQyxPQUFSLGtCQUEwQkosRUFBSS9HLGtEQU96QyxTQUF1QnRCLEVBQU0wSSxHQUMzQixPQUFPUixNQUFNLEdBQUQsT0FBSXhILEtBQUtvSCxTQUFULFlBQTZCLENBQ3ZDSyxPQUFRLFFBQ1JGLFFBQVN2SCxLQUFLc0gsU0FDZFcsS0FBTUMsS0FBS0MsVUFBVSxDQUNuQjdJLEtBQU1BLEVBQ044SSxNQUFPSixNQUVSTixNQUFLLFNBQUNDLEdBQ1AsT0FBSUEsRUFBSUMsR0FDQ0QsRUFBSUUsT0FHTkMsUUFBUUMsT0FBUixrQkFBMEJKLEVBQUkvRyxvQ0FJekMsU0FBU3RCLEVBQU1DLEdBQ2IsT0FBT2lJLE1BQU0sR0FBRCxPQUFJeEgsS0FBS29ILFNBQVQsU0FBMEIsQ0FDcENLLE9BQVEsT0FDUkYsUUFBU3ZILEtBQUtzSCxTQUNkVyxLQUFNQyxLQUFLQyxVQUFVLENBQ25CN0ksS0FBTUEsRUFDTkMsS0FBTUEsTUFFUG1JLE1BQUssU0FBQ0MsR0FDUCxPQUFJQSxFQUFJQyxHQUNDRCxFQUFJRSxPQUdOQyxRQUFRQyxPQUFSLGtCQUEwQkosRUFBSS9HLHNDQUl6QyxTQUFXc0QsR0FDVCxPQUFPc0QsTUFBTSxHQUFELE9BQUl4SCxLQUFLb0gsU0FBVCxpQkFBMEJsRCxHQUFNLENBQzFDdUQsT0FBUSxTQUNSRixRQUFTdkgsS0FBS3NILFdBQ2JJLE1BQUssU0FBQ0MsR0FDUCxPQUFJQSxFQUFJQyxHQUNDRCxFQUFJRSxPQUdOQyxRQUFRQyxPQUFSLGtCQUEwQkosRUFBSS9HLHNDQUt6QyxTQUFXc0QsR0FDVCxPQUFPc0QsTUFBTSxHQUFELE9BQUl4SCxLQUFLb0gsU0FBVCxpQkFBMEJsRCxHQUFNLENBQzFDdUQsT0FBUSxNQUNSRixRQUFTdkgsS0FBS3NILFdBQ2JJLE1BQUssU0FBQ0MsR0FDUCxPQUFJQSxFQUFJQyxHQUNDRCxFQUFJRSxPQUdOQyxRQUFRQyxPQUFSLGtCQUEwQkosRUFBSS9HLHVDQU16QyxTQUFZc0QsR0FDVixPQUFPc0QsTUFBTSxHQUFELE9BQUl4SCxLQUFLb0gsU0FBVCx1QkFBZ0NsRCxHQUFNLENBQ2hEdUQsT0FBUSxNQUNSRixRQUFTdkgsS0FBS3NILFdBQ2JJLE1BQUssU0FBQ0MsR0FDUCxPQUFJQSxFQUFJQyxHQUNDRCxFQUFJRSxPQUdOQyxRQUFRQyxPQUFSLGtCQUEwQkosRUFBSS9HLDBDQUl6QyxTQUFlc0QsR0FDYixPQUFPc0QsTUFBTSxHQUFELE9BQUl4SCxLQUFLb0gsU0FBVCx1QkFBZ0NsRCxHQUFNLENBQ2hEdUQsT0FBUSxTQUNSRixRQUFTdkgsS0FBS3NILFdBQ2JJLE1BQUssU0FBQ0MsR0FDUCxPQUFJQSxFQUFJQyxHQUNDRCxFQUFJRSxPQUdOQyxRQUFRQyxPQUFSLGtCQUEwQkosRUFBSS9HLHVDQUl6QyxTQUFZckIsR0FDVixPQUFPaUksTUFBTSxHQUFELE9BQUl4SCxLQUFLb0gsU0FBVCxtQkFBb0MsQ0FDOUNLLE9BQVEsUUFDUkYsUUFBU3ZILEtBQUtzSCxTQUNkVyxLQUFNQyxLQUFLQyxVQUFVLENBQ25CbEIsT0FBUTFILE1BRVRtSSxNQUFLLFNBQUNDLEdBQ1AsT0FBSUEsRUFBSUMsR0FDQ0QsRUFBSUUsT0FHTkMsUUFBUUMsT0FBUixrQkFBMEJKLEVBQUkvRyx1RkE1SXJDc0csR0NDQTFFLEVBQW1CLENBQ3ZCaUIsYUFBYyxrQkFDZEMsWUFBYSxvQkFDYkUscUJBQXNCLGdCQUdsQnlFLEVBQWUsMkJBQ2ZDLEVBQVksdUJBRVpDLEVBQWUsdUJBQ2ZDLEVBQW9CLDRCQUdwQkMsRUFBdUI1SCxTQUFTQyxjQUFjLHlCQUM5QzRILEVBQW1CN0gsU0FBU0MsY0FBYyw2QkFDMUM2SCxFQUF3QjlILFNBQVNDLGNBQWMsbUJBRy9DaUcsRUFBWWxHLFNBQVNDLGNBQWMscUJBQ25Da0csRUFBa0JuRyxTQUFTQyxjQUFjLHFJQUdsQkQsU0FBU0MsY0FBYywwQkFDeEJELFNBQVNDLGNBQWMseUJDU25ELElBQU04SCxFQUFvQixJQUFJckQsRUFBYzhDLEVBQWMsQ0FDeEQ3QyxpQkFBa0IsV0FBdUJxRCxHQUE4QixJQUFsRHZKLEVBQWtELEVBQWxEQSxLQUFNMEksRUFBNEMsRUFBNUNBLFdBRW5CYyxFQUFrQm5KLEdBQUlvSix1QkFBdUJ6SixFQUFNMEksR0FDekRhLEVBQTBCMUgsWUFBYyxnQkFDeEMySCxFQUNHcEIsTUFBSyxXQUVKc0IsRUFBZ0JDLFlBQVkzSixFQUFNMEksTUFFbkNOLE1BQUssa0JBQU1rQixFQUFrQjFELFdBQzdCZ0UsT0FBTSxTQUFDQyxHQUNOQyxRQUFRQyxJQUFJRixNQUViRyxTQUFRLGtCQUFPVCxFQUEwQjFILFlBQWMsa0JBSTlEeUgsRUFBa0JXLG9CQUVsQixJQUFNUCxFQUFrQixJQUFJMUMsRUFBUyxpQkFBa0Isd0JBR3ZEbUMsRUFBcUJ0RyxpQkFBaUIsU0FBUyxXQVMvQyxJQUF3QnFILEVBUnRCWixFQUFrQmEsT0FDbEJDLEVBQWtCQyxrQkFPSUgsRUFMTFIsRUFBZ0JZLGNBTWpDN0MsRUFBVW5CLE1BQVE0RCxFQUFTM0MsWUFDM0JHLEVBQWdCcEIsTUFBUTRELEVBQVMxQyxxQkFJbkMsSUFBTStDLEVBQWtCLElBQUl0RSxFQUFjK0MsRUFBVyxDQUNuRDlDLGlCQUFrQixXQUFpQnFELEdBQThCLElBQTVDdkosRUFBNEMsRUFBNUNBLEtBQU1DLEVBQXNDLEVBQXRDQSxLQUN6QnNKLEVBQTBCMUgsWUFBYyxnQkFDeEMsSUFBTTJJLEVBQVl4SyxFQUNaeUssRUFBV3hLLEVBR1NJLEdBQUlxSyxTQUFTRixFQUFXQyxHQUkvQ3JDLE1BQUssU0FBQ3VDLEdBRUwsSUFBTWpJLEVBQU9rSSxHQUNYRCxFQUFLM0ssS0FDTDJLLEVBQUsxSyxLQUNMMEssRUFBS3pLLE1BQ0x5SyxFQUFLeEssTUFDTHdLLEVBQUt2SyxJQUNMQyxJQUVGd0ssR0FBY0MsUUFBUXBJLEdBQ3RCcUksRUFBZTlHLDBCQUVoQm1FLE1BQUssa0JBQU1tQyxFQUFnQjNFLFdBQzNCZ0UsT0FBTSxTQUFDQyxHQUNOQyxRQUFRQyxJQUFJRixNQUViRyxTQUFRLGtCQUFPVCxFQUEwQjFILFlBQWMsa0JBRzlEMEksRUFBZ0JOLG9CQUdoQmIsRUFBaUJ2RyxpQkFBaUIsU0FBUyxXQUN6QzBILEVBQWdCSixPQUNoQlksRUFBZVYscUJBSWpCLElBU0lXLEVBVEVDLEVBQW1CLElBQUlwRSxFRHRHVixxQkMwR25CLFNBQVN0RyxFQUFnQlAsRUFBTUMsR0FDN0JnTCxFQUFpQmQsS0FBS25LLEVBQU1DLEdBTTlCLFNBQVNPLEVBQW1Cb0UsRUFBSVcsRUFBUzNDLEdBSXZDLE9BSEFzSSxFQUFtQmYsT0FDbkJlLEVBQW1CQyxlQUFldkksR0FFMUJvSSxFQUEwQixDQUNoQ3BHLEdBQUlBLEVBQ0pXLFFBQVNBLEdBS2IsU0FBUzlFLEVBQXFCMkssRUFBUTlKLEVBQVFpRSxHQUNiLEdBQTNCN0UsS0FBS1csWUFBWUMsT0FDbkJqQixHQUNHZ0wsWUFBWUQsR0FDWmhELE1BQUssU0FBQ0MsR0FDTCxPQUFPQSxFQUFJbkksTUFBTXlCLFVBRWxCeUcsTUFBSyxTQUFDQyxHQUNMOUMsRUFBUS9ELGNBQWMsdUJBQXVCSyxZQUFjd0csS0FHL0RoSSxHQUNHaUwsZUFBZUYsR0FDZmhELE1BQUssU0FBQ0MsR0FDTCxPQUFPQSxFQUFJbkksTUFBTXlCLFVBRWxCeUcsTUFBSyxTQUFDQyxHQUNMOUMsRUFBUS9ELGNBQWMsdUJBQXVCSyxZQUFjd0csS0F0Q25FNEMsRUFBaUJoQixvQkE0Q2pCLElBQU1pQixFQUFxQixJQUFJakYsRUFBY2dELEVBQWMsQ0FDekQvQyxpQkFBa0IsU0FBQ3FGLEVBQUdDLEVBQUdDLEdBRXZCcEwsR0FDR3FMLFdBQVdWLEVBQXdCcEcsSUFDbkN3RCxNQUFLLGtCQUFNcUQsRUFBcUJULEVBQXdCekYsWUFDeEQ2QyxNQUFLLGtCQUFNOEMsRUFBbUJ0RixXQUM5QmdFLE9BQU0sU0FBQ0MsR0FDTkMsUUFBUUMsSUFBSUYsU0FJcEJxQixFQUFtQmpCLG9CQUluQlosRUFBc0J4RyxpQkFBaUIsU0FBUyxXQUM5QzhJLEVBQXdCeEIsT0FDeEJ5QixFQUF1QnZCLHFCQUl6QixJQUFNc0IsRUFBMEIsSUFBSTFGLEVBQWNpRCxFQUFtQixDQUNuRWhELGlCQUFrQixXQUFXcUQsR0FBOEIsSUFBdEN0SixFQUFzQyxFQUF0Q0EsS0FDbkJzSixFQUEwQjFILFlBQWMsZ0JBR3hDeEIsR0FDR3dMLFlBQVk1TCxHQUVabUksTUFBSyxrQkFBTXNCLEVBQWdCb0MsY0FBYzdMLE1BQ3pDbUksTUFBSyxXQUNKd0QsRUFBdUIzSCx1QkFFdkIwSCxFQUF3Qi9GLFdBR3pCZ0UsT0FBTSxTQUFDQyxHQUNOQyxRQUFRQyxJQUFJRixNQUViRyxTQUFRLGtCQUFPVCxFQUEwQjFILFlBQWMsa0JBRzlEOEosRUFBd0IxQixvQkFHeEIsSUFBTUcsRUFBb0IsSUFBSW5ILEVBQWNDLEVBQWtCNkYsR0FDOURxQixFQUFrQjJCLG1CQUVsQixJQUFNaEIsRUFBaUIsSUFBSTlILEVBQWNDLEVBQWtCOEYsR0FDM0QrQixFQUFlZ0IsbUJBRWYsSUFBTUMsRUFBb0IsSUFBSS9JLEVBQWNDLEVBQWtCK0YsR0FDOUQrQyxFQUFrQkQsbUJBQ2xCQyxFQUFrQmhJLHNCQUVsQixJQUFNNEgsRUFBeUIsSUFBSTNJLEVBQ2pDQyxFQUNBZ0csR0FRRixTQUFTMEIsR0FBVzVLLEVBQU1DLEVBQU1DLEVBQU9DLEVBQU9DLEVBQUtDLEdBY2pELE9BYmEsSUFBSU4sRUFDZkMsRUFDQUMsRUFDQUMsRUFDQUMsRUFDQUMsRUFDQUMsRUQxTVMsMkJDNE1URSxFQUNBQyxFQUNBQyxHQUdVd0wsZUFwQmRMLEVBQXVCRyxtQkFHTixJQUFJaE0sRUFxQnJCLElBQU1vRixHQUFXLGtCQUdYMEYsR0FBZ0IsSUFBSTNGLEVBQVEsR0FBSUMsSUFHaEM5RSxHQUFNLElBQUl1SCxFQUFJLENBQ2xCRyxRQUFTLCtDQUNURSxRQUFTLENBQ1BpRSxjQUFlLHVDQUNmLGVBQWdCLHNCQUlwQjFELFFBQVEyRCxJQUFJLENBR1Y5TCxHQUFJK0wsaUJBRUovTCxHQUFJZ00sb0JBRUhqRSxNQUFLLFlBQThCLCswQkFBNUJrRSxFQUE0QixLQUFsQkMsRUFBa0IsS0FFbEM3QyxFQUFnQkMsWUFBWTJDLEVBQVN0TSxLQUFNc00sRUFBU3hELE9BQ3BEWSxFQUFnQm9DLGNBQWNRLEVBQVMzRSxRQUd2QyxJQUFNNkUsRUFBVyxJQUFJdEgsRUFDbkIsQ0FFRUUsU0FBVSxTQUFDOUMsR0FDVCxJQUFNSSxFQUFPa0ksR0FFWHRJLEVBQUt0QyxLQUNMc0MsRUFBS3JDLEtBQ0xxQyxFQUFLcEMsTUFDTG9DLEVBQUtuQyxNQUNMbUMsRUFBS2xDLElBQ0xDLElBRUZtTSxFQUFTMUIsUUFBUXBJLEtBR3JCeUMsSUFHRnFILEVBQVNDLFlBQVlGLE1BRXRCM0MsT0FBTSxTQUFDQyxHQUNOQyxRQUFRQyxJQUFJRiIsInNvdXJjZXMiOlsid2VicGFjazovL21lc3RvLy4vc3JjL2NvbXBvbmVudHMvQ2FyZC5qcyIsIndlYnBhY2s6Ly9tZXN0by8uL3NyYy9jb21wb25lbnRzL0Zvcm1WYWxpZGF0b3IuanMiLCJ3ZWJwYWNrOi8vbWVzdG8vLi9zcmMvY29tcG9uZW50cy9TZWN0aW9uLmpzIiwid2VicGFjazovL21lc3RvLy4vc3JjL2NvbXBvbmVudHMvUG9wdXAuanMiLCJ3ZWJwYWNrOi8vbWVzdG8vLi9zcmMvY29tcG9uZW50cy9Qb3B1cFdpdGhGb3JtLmpzIiwid2VicGFjazovL21lc3RvLy4vc3JjL2NvbXBvbmVudHMvUG9wdXBXaXRoSW1hZ2UuanMiLCJ3ZWJwYWNrOi8vbWVzdG8vLi9zcmMvY29tcG9uZW50cy9Vc2VySW5mby5qcyIsIndlYnBhY2s6Ly9tZXN0by8uL3NyYy9jb21wb25lbnRzL0FwaS5qcyIsIndlYnBhY2s6Ly9tZXN0by8uL3NyYy91dGlsL2luaXRpYWxDYXJkcy5qcyIsIndlYnBhY2s6Ly9tZXN0by8uL3NyYy9wYWdlcy9pbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJjbGFzcyBDYXJkIHtcclxuICAvLyDQsiDQutC+0L3RgdGC0YDRg9C60YLQvtGA0LUg0LHRg9C00YPRgiDQtNC40L3QsNC80LjRh9C10YHQutC40LUg0LTQsNC90L3Ri9C1LFxyXG4gIC8vINC00LvRjyDQutCw0LbQtNC+0LPQviDRjdC60LfQtdC80L/Qu9GP0YDQsCDRgdCy0L7QuFxyXG4gIGNvbnN0cnVjdG9yKFxyXG4gICAgbmFtZSxcclxuICAgIGxpbmssXHJcbiAgICBsaWtlcyxcclxuICAgIG93bmVyLFxyXG4gICAgX2lkLFxyXG4gICAgYXBpLFxyXG4gICAgbXlJZCxcclxuICAgIGhhbmRsZUNhcmRDbGljayxcclxuICAgIGhhbmRsZUNsaWNrRGVsQ2FyZCxcclxuICAgIGhhbmRsZUNhcmRDbGlja0hlYXJ0XHJcbiAgKSB7XHJcbiAgICB0aGlzLl9uYW1lID0gbmFtZTtcclxuICAgIHRoaXMuX2xpbmsgPSBsaW5rO1xyXG4gICAgdGhpcy5fbGlrZXMgPSBsaWtlcztcclxuICAgIHRoaXMuX293bmVyID0gb3duZXI7XHJcbiAgICB0aGlzLl9faWQgPSBfaWQ7XHJcbiAgICB0aGlzLl9hcGkgPSBhcGk7XHJcbiAgICB0aGlzLl9oYW5kbGVab29tID0gaGFuZGxlQ2FyZENsaWNrO1xyXG4gICAgdGhpcy5fbXlJZCA9IG15SWQ7XHJcbiAgICB0aGlzLl9oYW5kbGVDbGlja0RlbENhcmQgPSBoYW5kbGVDbGlja0RlbENhcmQ7XHJcbiAgICB0aGlzLl9oYW5kbGVDYXJkQ2xpY2tIZWFydCA9IGhhbmRsZUNhcmRDbGlja0hlYXJ0O1xyXG4gICAgdGhpcy5fbGlrZVN0YXR1cyA9IHtcclxuICAgICAgc3RhdHVzOiBmYWxzZSxcclxuICAgICAgLy9zdW1tOiAwLFxyXG4gICAgfTtcclxuICB9XHJcblxyXG4gIC8vINC30LTQtdGB0Ywg0LLRi9C/0L7Qu9C90LjQvCDQstGB0LUg0L3QtdC+0LHRhdC+0LTQuNC80YvQtSDQvtC/0LXRgNCw0YbQuNC4LCDRh9GC0L7QsdGLINCy0LXRgNC90YPRgtGMINGA0LDQt9C80LXRgtC60YNcclxuICBfZ2V0VGVtcGxhdGUoKSB7XHJcbiAgICAvLyDQt9Cw0LHQuNGA0LDQtdC8INGA0LDQt9C80LXRgtC60YMg0LjQtyBIVE1MINC4INC60LvQvtC90LjRgNGD0LXQvCDRjdC70LXQvNC10L3RglxyXG4gICAgY29uc3QgaXRlbVRlbXBsYXRlID0gZG9jdW1lbnRcclxuICAgICAgLnF1ZXJ5U2VsZWN0b3IoXCIjY2FyZC10ZW1wbGF0ZVwiKSAvL9C40YnQtdGCINGB0LDQvCDRgtC10LzQv9C7XHJcbiAgICAgIC5jb250ZW50LmNsb25lTm9kZSh0cnVlKTtcclxuICAgIC8vINCy0LXRgNC90ZHQvCBET00t0Y3Qu9C10LzQtdC90YIg0LrQsNGA0YLQvtGH0LrQuFxyXG4gICAgcmV0dXJuIGl0ZW1UZW1wbGF0ZS5xdWVyeVNlbGVjdG9yKFwiLmVsZW1lbnRzX19pdGVtLWxpc3RcIik7XHJcbiAgfVxyXG5cclxuICAvL9GD0YHRgtCw0L3QvtCy0LjRgtGMINC60L7Qu9C40YfQtdGB0YLQstC+INC70LDQudC60L7QsiAtINC+0L3Qu9Cw0LnQvSwg0LjQvdGE0L7RgNC80LDRhtC40Y8g0LHRg9C00LXRgiDQvtGC0YDQsNC20LDRgtGM0YHRjyDQsdC10Lcg0L/QtdGA0LXQt9Cw0LPRgNGD0LfQutC4INGB0YLRgNCw0L3QuNGG0LhcclxuICBzZXRUaGVOdW1iZXJPZkxpa2VzKGxlbmd0aCkge1xyXG4gICAgdGhpcy5fZWxlbWVudC5xdWVyeVNlbGVjdG9yKFwiLmVsZW1lbnRzX19ob3ctbGlrZVwiKS50ZXh0Q29udGVudCA9IGxlbmd0aDtcclxuICB9XHJcblxyXG4gIGdlbmVyYXRlQ2FyZCgpIHtcclxuICAgIC8vINCX0LDQv9C40YjQtdC8INGA0LDQt9C80LXRgtC60YMg0LIg0L/RgNC40LLQsNGC0L3QvtC1INC/0L7Qu9C1IF9lbGVtZW50LlxyXG4gICAgLy8g0KLQsNC6INGDINC00YDRg9Cz0LjRhSDRjdC70LXQvNC10L3RgtC+0LIg0L/QvtGP0LLQuNGC0YHRjyDQtNC+0YHRgtGD0L8g0Log0L3QtdC5LlxyXG4gICAgdGhpcy5fZWxlbWVudCA9IHRoaXMuX2dldFRlbXBsYXRlKCk7XHJcbiAgICB0aGlzLl9zZXRFdmVudExpc3RlbmVycygpOyAvL9C/0YDQuNCy0Y/Qt9GL0LLQsNC10Lwg0YHQu9GD0YjQsNGC0LXQu9GMLCDQsCDRh9GC0L4g0Lgg0LrQsNC6INC+0L/QuNGB0LDQvdC+INC90LjQttC1XHJcbiAgICB0aGlzLl9lbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuZWxlbWVudHNfX2N1dC10ZXh0XCIpLnRleHRDb250ZW50ID0gdGhpcy5fbmFtZTtcclxuICAgIC8vMTEuMi4g0JfQsNC80LXQvdGP0YLRjCDQsiDRgNCw0LfQvNC10YLQutC1INGC0LXQutGB0YJcclxuICAgIHRoaXMuX2VsZW1lbnQucXVlcnlTZWxlY3RvcihcIi5lbGVtZW50c19faW1hZ2VcIikuc3JjID0gdGhpcy5fbGluaztcclxuICAgIC8vMTEuMi4xINC00L7QsdCw0LLQuNGC0YwgQUxUXHJcbiAgICB0aGlzLl9lbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuZWxlbWVudHNfX2ltYWdlXCIpLmFsdCA9IHRoaXMuX25hbWU7XHJcblxyXG4gICAgLy/QlNC+0LHQsNCy0LvRj9GC0Ywg0LrQvtGA0LfQuNC90LrRgyDRg9C00LDQu9C10L3QuNGPINC10YHQu9C4INGPINGB0L7Qt9C00LDQuyDQutCw0YDRgtC+0YfQutGDXHJcbiAgICBpZiAodGhpcy5fb3duZXIuX2lkICE9IHRoaXMuX215SWQpIHtcclxuICAgICAgdGhpcy5fZWxlbWVudFxyXG4gICAgICAgIC5xdWVyeVNlbGVjdG9yKFwiLmVsZW1lbnRzX19kZWxsXCIpXHJcbiAgICAgICAgLmNsYXNzTGlzdC5hZGQoXCJlbGVtZW50c19fZGVsbF9ub25lXCIpO1xyXG4gICAgfVxyXG5cclxuICAgIC8v0LLQvdC+0YHQuNGCINC00LDQvdC90YvQtSDRgdC60L7Qu9GM0LrQviDQu9Cw0LnQutC+0LJcclxuICAgIHRoaXMuc2V0VGhlTnVtYmVyT2ZMaWtlcyh0aGlzLl9saWtlcy5sZW5ndGgpO1xyXG5cclxuICAgIC8v0J/RgNC+0LLQtdGA0LjRgtGMINC/0L7RgdC70LUg0L/QtdGA0LXQt9Cw0LPRgNGD0LfQutC4INC10YHRgtGMINC70Lgg0LzQvtC5INC70LDQudC6INCyINGB0L/QuNGB0LrQtVxyXG4gICAgaWYgKHRoaXMuX2xpa2VzLmZpbmRJbmRleCgoaXRlbSkgPT4gaXRlbS5faWQgPT0gdGhpcy5fbXlJZCkgPj0gMCkge1xyXG4gICAgICB0aGlzLl9lbGVtZW50XHJcbiAgICAgICAgLnF1ZXJ5U2VsZWN0b3IoXCIuZWxlbWVudHNfX2hhcnRcIilcclxuICAgICAgICAuY2xhc3NMaXN0LmFkZChcImVsZW1lbnRzX19oYXJ0X2FjdGl2XCIpO1xyXG4gICAgICB0aGlzLl9saWtlU3RhdHVzLnN0YXR1cyA9IHRydWU7XHJcbiAgICB9XHJcblxyXG4gICAgLy8g0JLQtdGA0L3RkdC8INGN0LvQtdC80LXQvdGCINC90LDRgNGD0LbRg1xyXG4gICAgcmV0dXJuIHRoaXMuX2VsZW1lbnQ7XHJcbiAgfVxyXG5cclxuICAvL9GA0LXQsNC70LjQt9Cw0LnQuNGPINC70LDQudC60LBcclxuICBfaGFuZGxlTWVzc2VnZUNsaWNrKGV2dCkge1xyXG4gICAgLy/QvtC/0LjRgdGL0LLQsNC10Lwg0YfRgtC+INCx0YPQtNC10Lwg0Lgg0LPQtNC1INC00LXQu9Cw0YLRjFxyXG4gICAgaWYgKHRoaXMuX2xpa2VTdGF0dXMuc3RhdHVzID09IGZhbHNlKSB7XHJcbiAgICAgIHRoaXMuX2hhbmRsZUNhcmRDbGlja0hlYXJ0KFxyXG4gICAgICAgIHRoaXMuX19pZCxcclxuICAgICAgICB0aGlzLl9saWtlU3RhdHVzLnN0YXR1cyxcclxuICAgICAgICB0aGlzLl9lbGVtZW50XHJcbiAgICAgICk7XHJcblxyXG4gICAgICB0aGlzLl9saWtlU3RhdHVzLnN0YXR1cyA9IHRydWU7XHJcblxyXG4gICAgICBldnQudGFyZ2V0LmNsYXNzTGlzdC50b2dnbGUoXCJlbGVtZW50c19faGFydF9hY3RpdlwiKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHRoaXMuX2hhbmRsZUNhcmRDbGlja0hlYXJ0KFxyXG4gICAgICAgIHRoaXMuX19pZCxcclxuICAgICAgICB0aGlzLl9saWtlU3RhdHVzLnN0YXR1cyxcclxuICAgICAgICB0aGlzLl9lbGVtZW50XHJcbiAgICAgICk7XHJcblxyXG4gICAgICBldnQudGFyZ2V0LmNsYXNzTGlzdC50b2dnbGUoXCJlbGVtZW50c19faGFydF9hY3RpdlwiKTtcclxuXHJcbiAgICAgIHRoaXMuX2xpa2VTdGF0dXMuc3RhdHVzID0gZmFsc2U7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBkZWxldGVDc3JkT25TaXRlKGNhcmQpIHtcclxuICAgIGNhcmQucmVtb3ZlKCk7XHJcbiAgfVxyXG5cclxuICAvL9Cg0LXQsNC70LjQt9Cw0YbQuNGPINC+0YLQutGA0YvRgtC40Y8g0YHQvtCz0LvQsNGB0LjRjyDQvdCwINGD0LTQsNC70LXQvdC40LUgKyDQvtGC0LrRgNGL0YLRjCDQv9C+0L/QsNC7INC/0L7QtNGC0LLQtdGA0LbQtNC10L3QuNGPXHJcbiAgX2VsZW1lbnREZWxldGUoKSB7XHJcbiAgICB0aGlzLl9oYW5kbGVDbGlja0RlbENhcmQodGhpcy5fX2lkLCB0aGlzLl9lbGVtZW50LCB0aGlzLmRlbGV0ZUNzcmRPblNpdGUpO1xyXG4gIH1cclxuICAvLzEuMSDRhNGD0L3QutGG0LjQvtC90LDQuyDQvtCx0YDQsNCx0L7RgtC60Lgg0YHQvtCx0YvRgtC40LkgLSDQvNC10YLQvtC0INC00L7QsdCw0LLQu9C10L3QuNGPINGB0L7QsdGL0YLQuNGPINC90LAg0LrQvdC+0L/QutGDKNC90YPQttC10L0g0LTQu9GPINC00L7QsdCw0LLQu9C10L3QuNGPINC90LXRgdC60L7Qu9GM0LrQuNGFINGB0LvRg9GI0LDRgtC10LvQtdC5KVxyXG4gIF9zZXRFdmVudExpc3RlbmVycygpIHtcclxuICAgIC8v0L3QsNCy0LXRiNC40LLQsNC10Lwg0YHQsNC80L4g0YHQvtCx0YvRgtC40LVcclxuICAgIHRoaXMuX2VsZW1lbnRcclxuICAgICAgLnF1ZXJ5U2VsZWN0b3IoXCIuZWxlbWVudHNfX2hhcnRcIilcclxuICAgICAgLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoZXZ0KSA9PiB7XHJcbiAgICAgICAgdGhpcy5faGFuZGxlTWVzc2VnZUNsaWNrKGV2dCk7XHJcbiAgICAgIH0pO1xyXG5cclxuICAgIHRoaXMuX2VsZW1lbnRcclxuICAgICAgLnF1ZXJ5U2VsZWN0b3IoXCIuZWxlbWVudHNfX2RlbGxcIilcclxuICAgICAgLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PiB7XHJcbiAgICAgICAgdGhpcy5fZWxlbWVudERlbGV0ZSgpO1xyXG4gICAgICB9KTtcclxuXHJcbiAgICB0aGlzLl9lbGVtZW50XHJcbiAgICAgIC5xdWVyeVNlbGVjdG9yKFwiLmVsZW1lbnRzX19pbWFnZVwiKVxyXG4gICAgICAuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIChldmUpID0+IHtcclxuICAgICAgICB0aGlzLl9oYW5kbGVab29tKHRoaXMuX25hbWUsIHRoaXMuX2xpbmspO1xyXG4gICAgICB9KTtcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCB7IENhcmQgfTtcclxuIiwiY2xhc3MgRm9ybVZhbGlkYXRvciB7XHJcbiAgY29uc3RydWN0b3IoY29uZmlnVmFsaWRhdGlvbiwgcG9wdXApIHtcclxuICAgIHRoaXMuX2Zvcm1TZWxlY3RvciA9IGNvbmZpZ1ZhbGlkYXRpb24uZm9ybVNlbGVjdG9yO1xyXG4gICAgdGhpcy5fYnV0dG9uVmFsaWQgPSBjb25maWdWYWxpZGF0aW9uLmJ1dHRvblZhbGlkO1xyXG4gICAgLy90aGlzLl9zdWJtaXRCdXR0b25TZWxlY3RvciA9IGNvbmZpZ1ZhbGlkYXRpb24uc3VibWl0QnV0dG9uU2VsZWN0b3I7XHJcbiAgICB0aGlzLl9wb3B1cCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IocG9wdXApO1xyXG4gICAgdGhpcy5fc3VibWl0QnV0dG9uID0gIHRoaXMuX3BvcHVwLnF1ZXJ5U2VsZWN0b3IoY29uZmlnVmFsaWRhdGlvbi5zdWJtaXRCdXR0b25TZWxlY3Rvcik7IFxyXG4gICAgdGhpcy5fcG9wdXBDb250ZW50ID0gdGhpcy5fcG9wdXAucXVlcnlTZWxlY3Rvcih0aGlzLl9mb3JtU2VsZWN0b3IpO1xyXG4gIH1cclxuXHJcbiAgZW5hYmxlVmFsaWRhdGlvbigpIHtcclxuICAgIHRoaXMuX3NldEV2ZW50TGlzdGVuZXJzKCk7XHJcbiAgfVxyXG5cclxuICBfaGFuZGxlRm9ybUlucHV0ID0gKGV2ZW50KSA9PiB7XHJcbiAgICBjb25zdCBmb3JtID0gZXZlbnQuY3VycmVudFRhcmdldDsgLy/Qv9C+0LvRg9GH0LDQtdC8INGE0L7RgNC80YMg0LrQsNC00LAg0L/QvtCy0LXRiNC10L3QviDRgdC+0LHRi9GC0LjQtVxyXG4gICAgY29uc3QgaW5wdXQgPSBldmVudC50YXJnZXQ7IC8v0L/QvtC70YPRh9Cw0LXQvCDQv9C+0LvQtSDQs9C00LUg0L/RgNC+0LjQt9C+0YjQu9C+INGB0L7QsdGL0YLQuNC1XHJcbiAgICAvLzEuINCd0LDQudGC0Lgg0L3QtdCy0LDQu9C40LTQvdGL0LUg0L/QvtC70Y8g0Lgg0YPRgdGC0LDQvdC+0LLQuNGC0Ywg0YLQtdC60YHRgiDQvtGI0LjQsdC+0LpcclxuICAgIHRoaXMuX3NldEN1c3RvbUVycm9yKGlucHV0KTtcclxuICAgIC8vMi4g0J/QvtC60LDQt9Cw0YLRjCDQvtGI0LjQsdC60Lgg0L/QvtC70YzQt9C+0LLQsNGC0LXQu9GP0LxcclxuICAgIHRoaXMuX3NldEZpZWxkRXJyb3IoaW5wdXQpO1xyXG4gICAgLy8zLiDQlNC10LDQutGC0LjQstC40YDQvtCy0LDRgtGMINC60L3QvtC/0LrRg1xyXG4gICAgdGhpcy5fdG9nZ2xlQnV0dG9uU3RhdGUoZm9ybSk7XHJcbiAgfTtcclxuXHJcbiAgX3NldEV2ZW50TGlzdGVuZXJzKCkge1xyXG4gICAgdGhpcy5fcG9wdXBDb250ZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJzdWJtaXRcIiwgKGV2dCkgPT4ge1xyXG4gICAgICBldnQucHJldmVudERlZmF1bHQoKTtcclxuICAgIH0pO1xyXG4gICAgdGhpcy5fcG9wdXBDb250ZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJpbnB1dFwiLCAoZXZlbnQpID0+IHtcclxuICAgICAgdGhpcy5faGFuZGxlRm9ybUlucHV0KGV2ZW50KTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgX3NldEN1c3RvbUVycm9yKGlucHV0KSB7XHJcbiAgICAvL9C/0YDQvtCy0LXRgNC60LAg0L/QvtC70Y8g0L3QsCDQvtGI0LjQsdC60YNcclxuICAgIGNvbnN0IHZhbGlkaXR5ID0gaW5wdXQudmFsaWRpdHk7IC8vdmFsaWRpdHkg0LHQtdGA0LXQvCDQuNC3INCx0LjQsdC70LjQvtGC0LXQutC4IE1EXHJcbiAgICBpbnB1dC5zZXRDdXN0b21WYWxpZGl0eShcIlwiKTsgLy/Rg9Cx0LjRgNCw0LXQvCDQvtGI0LjQsdC60YMg0L/QvtGB0LvQtSDQutCw0LbQtNC+0LPQviDQstCy0L7QtNCwINGB0LjQvNCy0L7Qu9CwXHJcbiAgfVxyXG5cclxuICBfc2V0RmllbGRFcnJvcihpbnB1dCkge1xyXG4gICAgY29uc3Qgc3BhbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoYCMke2lucHV0LmlkfS1lcnJvcmApO1xyXG4gICAgc3Bhbi50ZXh0Q29udGVudCA9IGlucHV0LnZhbGlkYXRpb25NZXNzYWdlOyAvLyAhISB2YWxpZGF0aW9uTWFzc2VnZSDRgdGO0LTQsCDQt9Cw0L/QuNGB0YvQstCw0LXRgtGB0Y8g0LjQtyAhIXNldEN1c3RvbVZhbGlkaXR5XHJcbiAgfVxyXG5cclxuICB0b2dnbGVCdXR0b25TdGF0ZU9uID0gKCkgPT4ge1xyXG4gICAgdGhpcy5fc3VibWl0QnV0dG9uLmNsYXNzTGlzdC5hZGQodGhpcy5fYnV0dG9uVmFsaWQpO1xyXG4gICAgdGhpcy5fc3VibWl0QnV0dG9uLnJlbW92ZUF0dHJpYnV0ZShcImRpc2FibGVkXCIpO1xyXG4gIH07XHJcblxyXG4gIHRvZ2dsZUJ1dHRvblN0YXRlT2ZmID0gKCkgPT4ge1xyXG4gICAgdGhpcy5fc3VibWl0QnV0dG9uLmNsYXNzTGlzdC5yZW1vdmUodGhpcy5fYnV0dG9uVmFsaWQpO1xyXG4gICAgdGhpcy5fc3VibWl0QnV0dG9uLnNldEF0dHJpYnV0ZShcImRpc2FibGVkXCIsIFwiZGlzYWJsZWRcIik7IC8v0LTQvtC70LbQtdC9INCx0YvRgtGMIDLQuSDQv9Cw0YDQsNC80LXRgtGAXHJcbiAgfTtcclxuXHJcbiAgLy/RgNCw0LHQvtGC0LAg0YEg0LrQvdC+0L/QutC+0LlcclxuICBfdG9nZ2xlQnV0dG9uU3RhdGUgPSAoZm9ybSkgPT4ge1xyXG4gICAgY29uc3QgaXNWYWxpZCA9IGZvcm0uY2hlY2tWYWxpZGl0eSgpO1xyXG4gICAgaWYgKGlzVmFsaWQpIHtcclxuICAgICAgdGhpcy50b2dnbGVCdXR0b25TdGF0ZU9uKCk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0aGlzLnRvZ2dsZUJ1dHRvblN0YXRlT2ZmKCk7XHJcbiAgICB9XHJcbiAgfTtcclxuICBcclxuICAvL9GB0LHRgNC+0YEg0L7RiNC40LHQvtC6INC/0YDQuCDQvtGC0LrRgNGL0YLQuNC4INGE0L7RgNC80YtcclxuICByZXNldElucHV0RXJyb3IoKSB7XHJcbiAgICB0aGlzLl9zcGFuT25Qb3B1cCA9IHRoaXMuX3BvcHVwLnF1ZXJ5U2VsZWN0b3JBbGwoXCJzcGFuXCIpO1xyXG4gICAgdGhpcy5fc3Bhbk9uUG9wdXAuZm9yRWFjaCgoaXRlbXMpID0+IGl0ZW1zLnRleHRDb250ZW50ID0gXCJcIiApO1xyXG4gIH1cclxuXHJcbn1cclxuXHJcbmV4cG9ydCB7IEZvcm1WYWxpZGF0b3IgfTtcclxuIiwiZXhwb3J0IGRlZmF1bHQgY2xhc3MgU2VjdGlvbiB7XHJcbiAgICBjb25zdHJ1Y3Rvcih7cmVuZGVyZXJ9LCBzZWxlY3RvcikgeyAgICAgICAgXHJcbiAgICAgICAgdGhpcy5fcmVuZGVyZXIgPSByZW5kZXJlcjsvL9Cx0LXRgNC10YLRgdGPINC40Lcg0LzQtdGC0L7QtNCwINC40L3QtNC10LrRgSjQvNGP0LPQutCw0Y8g0YHQstGP0LfRjClcclxuICAgICAgICB0aGlzLl9jb250YWluZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHNlbGVjdG9yKTsgLy9zZWxlY3RvciDRjdGC0L4g0LrQu9Cw0YHRgSDQutGD0LTQsCDQvdGD0LbQvdC+INCy0YHRgtCw0LLQu9GP0YLRjFxyXG4gICAgfVxyXG5cclxuICAgIHJlbmRlckl0ZW1zKGl0ZW0pIHtcclxuICAgICAgICBpdGVtLmZvckVhY2goaXRlbSA9PiB0aGlzLl9yZW5kZXJlcihpdGVtKSlcclxuICAgICAgfVxyXG4gICAgXHJcbiAgICBzZXRJdGVtKGVsZW1lbnQpIHtcclxuICAgICAgICB0aGlzLl9jb250YWluZXIucHJlcGVuZChlbGVtZW50KTtcclxuICAgICAgfVxyXG4gICAgXHJcbn1cclxuICAgIFxyXG5cclxuIiwiZXhwb3J0IGRlZmF1bHQgY2xhc3MgUG9wdXAge1xyXG4gIC8v0L7RgtCy0LXRh9Cw0LXRgiDQt9CwINC+0YLQutGA0YvRgtC40LUg0Lgg0LfQsNC60YDRi9GC0LjQtSDQv9C+0L/QsNC/0LBcclxuICBjb25zdHJ1Y3RvcihzZWxlY3RvclBvcHVwKSB7XHJcbiAgICB0aGlzLl9wb3B1cCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3Ioc2VsZWN0b3JQb3B1cCk7ICAgIFxyXG4gIH1cclxuXHJcbiAgb3BlbigpIHtcclxuICAgIC8v0LrQvtGC0L7RgNGL0LUg0L7RgtCy0LXRh9Cw0Y7RgiDQt9CwINC+0YLQutGA0YvRgtC40LUg0L/QvtC/0LDQv9CwLlxyXG4gICAgdGhpcy5fcG9wdXAuY2xhc3NMaXN0LmFkZChcInBvcHVwX2lzLW9wZW5cIik7XHJcbiAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwia2V5ZG93blwiLCB0aGlzLl9oYW5kbGVFc2NDbG9zZSk7ICAgIFxyXG4gIH1cclxuXHJcbiAgY2xvc2UoKSB7XHJcbiAgICAvL9C60L7RgtC+0YDRi9C1INC+0YLQstC10YfQsNGO0YIg0LfQsCDQt9Cw0LrRgNGL0YLQuNC1INC/0L7Qv9Cw0L/QsC5cclxuICAgIHRoaXMuX3BvcHVwLmNsYXNzTGlzdC5yZW1vdmUoXCJwb3B1cF9pcy1vcGVuXCIpOyBcclxuICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJrZXlkb3duXCIsIHRoaXMuX2hhbmRsZUVzY0Nsb3NlKTtcclxuICB9XHJcblxyXG4gIF9oYW5kbGVFc2NDbG9zZSA9IChldmVudCkgPT4ge1xyXG4gICAgLy/QutC+0YLQvtGA0YvQuSDRgdC+0LTQtdGA0LbQuNGCINC70L7Qs9C40LrRgyDQt9Cw0LrRgNGL0YLQuNGPINC/0L7Qv9Cw0L/QsCDQutC70LDQstC40YjQtdC5IEVzYy5cclxuICAgIGlmIChldmVudC5rZXkgPT09IFwiRXNjYXBlXCIpIHtcclxuICAgICAgdGhpcy5jbG9zZSgpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgc2V0RXZlbnRMaXN0ZW5lcnMoKSB7XHJcbiAgICAvL9C60L7RgtC+0YDRi9C5INC00L7QsdCw0LLQu9GP0LXRgiDRgdC70YPRiNCw0YLQtdC70Ywg0LrQu9C40LrQsCDQuNC60L7QvdC60LUg0LfQsNC60YDRi9GC0LjRjyDQv9C+0L/QsNC/0LAuINCc0L7QtNCw0LvRjNC90L7QtSDQvtC60L3QviDRgtCw0LrQttC1INC30LDQutGA0YvQstCw0LXRgtGB0Y8g0L/RgNC4INC60LvQuNC60LUg0L3QsCDQt9Cw0YLQtdC80L3RkdC90L3Rg9GOINC+0LHQu9Cw0YHRgtGMINCy0L7QutGA0YPQsyDRhNC+0YDQvNGLLlxyXG4gICAgLy/RgNC10LDQu9C40LfQsNGG0LjRjyDQt9Cw0LrRgNGL0YLQuNGPXHJcbiAgICB0aGlzLl9wb3B1cENsb3NlID0gdGhpcy5fcG9wdXAucXVlcnlTZWxlY3RvcihcIi5wb3B1cF9fY2xvc2VcIik7XHJcbiAgICB0aGlzLl9wb3B1cENsb3NlLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PiB7XHJcbiAgICAgIHRoaXMuY2xvc2UoKTtcclxuICAgIH0pO1xyXG5cclxuICAgIC8v0YDQtdCw0LvQuNC30LDRhtC40Y8g0J7QktC10YDQu9C10LlcclxuICAgIHRoaXMuX3BvcHVwLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoZXZ0KSA9PiB7XHJcbiAgICAgIGlmIChcclxuICAgICAgICBldnQudGFyZ2V0LmNsYXNzTGlzdC5jb250YWlucyhcInBvcHVwXCIpIHx8XHJcbiAgICAgICAgZXZ0LnRhcmdldC5jbGFzc0xpc3QuY29udGFpbnMoXCJwb3B1cF9fY2xvc2VcIilcclxuICAgICAgKSB7XHJcbiAgICAgICAgdGhpcy5jbG9zZSgpO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICB9XHJcbn1cclxuIiwiaW1wb3J0IFBvcHVwIGZyb20gXCIuL1BvcHVwLmpzXCI7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBQb3B1cFdpdGhGb3JtIGV4dGVuZHMgUG9wdXAge1xyXG4gIGNvbnN0cnVjdG9yKHNlbGVjdG9yUG9wdXAsIHsgaGFuZGxlRm9ybVN1Ym1pdCB9KSB7XHJcbiAgICAvLyvQvdGD0LbQvdC+INGD0YHRgtCw0L3QvtCy0LjRgtGMINC60L7Qu9Cx0LXQuiDRgdCw0LHQvNC40YLQsCDRhNC+0YDQvNGLXHJcbiAgICBzdXBlcihzZWxlY3RvclBvcHVwKTtcclxuXHJcbiAgICB0aGlzLl9oYW5kbGVGb3JtU3VibWl0ID0gaGFuZGxlRm9ybVN1Ym1pdDtcclxuICB9XHJcblxyXG4gIF9nZXRJbnB1dFZhbHVlcygpIHtcclxuICAgIHRoaXMuX2Zvcm1MaXN0ID0gdGhpcy5fcG9wdXAucXVlcnlTZWxlY3RvckFsbChcImlucHV0XCIpO1xyXG4gICAgdGhpcy5fZm9ybVZhbHVlcyA9IHt9O1xyXG4gICAgdGhpcy5fZm9ybUxpc3QuZm9yRWFjaChcclxuICAgICAgKGlucHV0KSA9PiAodGhpcy5fZm9ybVZhbHVlc1tpbnB1dC5uYW1lXSA9IGlucHV0LnZhbHVlKVxyXG4gICAgKTtcclxuICAgIHJldHVybiB0aGlzLl9mb3JtVmFsdWVzO1xyXG4gIH1cclxuXHJcbiAgc2V0U3VibWl0QXRpb24oc3VibWl0QWN0aW9uKSB7XHJcbiAgICAvL9C00LvRjyDQv9GA0L7QutC40LTRi9Cy0LDQvdC40Y8g0YTRg9C90LrRhtC40Lgg0LjQtyBjYXJkXHJcbiAgICB0aGlzLl9oYW5kbGVTdWJtaXRDYWxsQmFjayA9IHN1Ym1pdEFjdGlvbjtcclxuICB9XHJcblxyXG4gIHNldEV2ZW50TGlzdGVuZXJzKCkge1xyXG4gICAgc3VwZXIuc2V0RXZlbnRMaXN0ZW5lcnMoKTtcclxuICAgIHRoaXMuX3BvcHVwRm9ybVN1Ym1pdCA9IHRoaXMuX3BvcHVwLnF1ZXJ5U2VsZWN0b3IoXCIucG9wdXBfX2NvbnRlbnRcIik7XHJcbiAgICAvL9C00LvRjyDQvtGC0L7QsdGA0LDQttC10L3QuNGPINC00LDQvdC90YvRhSDQvtCxINGB0L7RhdGA0LDQvdC10L3QuNC4INC/0LXRgNC10LTQsNGOINC/0L7Qv9Cw0Lsg0LIg0YXQtdC90LTQu1xyXG4gICAgdGhpcy5fYnV0dG9uSW5mb21hdGlvbkFib3V0U2F2ZSA9IHRoaXMuX3BvcHVwLnF1ZXJ5U2VsZWN0b3IoXCIucG9wdXBfX3NhdmVcIik7XHJcbiAgICB0aGlzLl9wb3B1cEZvcm1TdWJtaXQuYWRkRXZlbnRMaXN0ZW5lcihcInN1Ym1pdFwiLCAoZXZ0KSA9PiB7XHJcbiAgICAgIGV2dC5wcmV2ZW50RGVmYXVsdCgpO1xyXG5cclxuICAgICAgdGhpcy5faGFuZGxlRm9ybVN1Ym1pdChcclxuICAgICAgICB0aGlzLl9nZXRJbnB1dFZhbHVlcygpLFxyXG4gICAgICAgIHRoaXMuX2J1dHRvbkluZm9tYXRpb25BYm91dFNhdmUsXHJcbiAgICAgICAgdGhpcy5faGFuZGxlU3VibWl0Q2FsbEJhY2tcclxuICAgICAgKTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgY2xvc2UoKSB7XHJcbiAgICBzdXBlci5jbG9zZSgpO1xyXG4gICAgdGhpcy5fcG9wdXBGb3JtU3VibWl0LnJlc2V0KCk7XHJcbiAgfVxyXG59XHJcbiIsImltcG9ydCBQb3B1cCBmcm9tIFwiLi9Qb3B1cC5qc1wiO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUG9wdXBXaXRoSW1hZ2UgZXh0ZW5kcyBQb3B1cCB7XHJcbiAgY29uc3RydWN0b3Ioc2VsZWN0b3JQb3B1cCkge1xyXG4gICAgc3VwZXIoc2VsZWN0b3JQb3B1cCk7XHJcbiAgICB0aGlzLl9zaXplRWxlbWVudFRleHQgPSB0aGlzLl9wb3B1cC5xdWVyeVNlbGVjdG9yKFwiI3NpemUtdHh0LWVsZW1lbnRcIik7XHJcbiAgICB0aGlzLl9zaXplRWxlbWVudEltZyA9IHRoaXMuX3BvcHVwLnF1ZXJ5U2VsZWN0b3IoXCIjc2l6ZS1pbWFnZS1lbGVtZW50XCIpO1xyXG4gIH1cclxuXHJcbiAgb3BlbihuYW1lLCBsaW5rKSB7XHJcbiAgICBzdXBlci5vcGVuKCk7XHJcbiAgICB0aGlzLl9zaXplRWxlbWVudFRleHQudGV4dENvbnRlbnQgPSBuYW1lOyAvL9Cy0YHRgtCw0LLQu9GP0Y4g0YLQtdC60YHRgiDQsiDQn9Ce0J/QkNCfLlxyXG4gICAgdGhpcy5fc2l6ZUVsZW1lbnRJbWcuc3JjID0gbGluaztcclxuICAgIHRoaXMuX3NpemVFbGVtZW50SW1nLmFsdCA9IG5hbWU7XHJcbiAgfVxyXG59XHJcbiIsImV4cG9ydCBkZWZhdWx0IGNsYXNzIFVzZXJJbmZvIHtcclxuICBjb25zdHJ1Y3RvcihuYW1lU2VsZWN0b3IsIHByb2Zlc3Npb25TZWxlY3Rvcikge1xyXG4gICAgLy90aGlzLl9uYW1lU2VsZWN0b3IgPSBuYW1lU2VsZWN0b3I7XHJcbiAgICB0aGlzLl9wcm9mZXNzaW9uU2VsZWN0b3IgPSBwcm9mZXNzaW9uU2VsZWN0b3I7XHJcbiAgICB0aGlzLl9uYW1lUG9wdXAgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKG5hbWVTZWxlY3Rvcik7XHJcbiAgICB0aGlzLl9wcm9mZXNzaW9uUG9wdXAgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHRoaXMuX3Byb2Zlc3Npb25TZWxlY3Rvcik7XHJcbiAgICB0aGlzLl9hdmF0YXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLnByb2ZpbGVfX2ltYWdlXCIpO1xyXG4gIH1cclxuXHJcbiAgZ2V0VXNlckluZm8oKSB7XHJcbiAgICAvL9C00LDQvdC90YvQtSDQv9C+0LvRjNC30L7QstCw0YLQtdC70Y8g0L3Rg9C20L3QviDQsdGD0LTQtdGCINC/0L7QtNGB0YLQsNCy0LjRgtGMINCyINGE0L7RgNC80YMg0L/RgNC4INC+0YLQutGA0YvRgtC40LguICAgIFxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgbmFtZVByb2ZpbGU6IHRoaXMuX25hbWVQb3B1cC50ZXh0Q29udGVudCxcclxuICAgICAgcHJvZmVzc2lvblByb2ZpbGU6IHRoaXMuX3Byb2Zlc3Npb25Qb3B1cC50ZXh0Q29udGVudCxcclxuICAgIH07XHJcbiAgfVxyXG5cclxuICBzZXRVc2VySW5mbyhuYW1lUG9wdXAsIHByb2Zlc3Npb25Qb3B1cCkge1xyXG4gICAgLy/QutC+0YLQvtGA0YvQuSDQv9GA0LjQvdC40LzQsNC10YIg0L3QvtCy0YvQtSDQtNCw0L3QvdGL0LUg0L/QvtC70YzQt9C+0LLQsNGC0LXQu9GPINC4INC00L7QsdCw0LLQu9GP0LXRgiDQuNGFINC90LAg0YHRgtGA0LDQvdC40YbRgy5cclxuICAgIHRoaXMuX25hbWVQb3B1cC50ZXh0Q29udGVudCA9IG5hbWVQb3B1cDtcclxuICAgIHRoaXMuX3Byb2Zlc3Npb25Qb3B1cC50ZXh0Q29udGVudCA9IHByb2Zlc3Npb25Qb3B1cDtcclxuICAgIC8vdGhpcy5fYXZhdGFyLnNyYyA9IGF2YXRhcjtcclxuICB9XHJcblxyXG4gIHNldFVzZXJBdmF0YXIgKGF2YXRhcikge1xyXG4gICAgdGhpcy5fYXZhdGFyLnNyYyA9IGF2YXRhcjtcclxuICB9XHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxufVxyXG4iLCJjbGFzcyBBcGkge1xyXG4gIGNvbnN0cnVjdG9yKGNvbmZpZykge1xyXG4gICAgdGhpcy5fYmFzZVVybCA9IGNvbmZpZy5iYXNlVXJsO1xyXG4gICAgdGhpcy5faGVhZGVycyA9IGNvbmZpZy5oZWFkZXJzO1xyXG4gIH1cclxuXHJcbiAgLy/Qv9C+0LvRg9GH0LDQtdC8INC00LDQvdC90YvQtSDQutCw0YDRgtC+0YfQtdC6INC00LvRjyDQtNCw0LvRjNC90LXQudGI0LXQuSDQstGB0YLQsNCy0LrQuFxyXG4gIGdldEluaXRpYWxDYXJkcygpIHtcclxuICAgIHJldHVybiBmZXRjaChgJHt0aGlzLl9iYXNlVXJsfWNhcmRzYCwge1xyXG4gICAgICBtZXRob2Q6IFwiR0VUXCIsXHJcbiAgICAgIGhlYWRlcnM6IHRoaXMuX2hlYWRlcnMsXHJcbiAgICB9KS50aGVuKChyZXMpID0+IHtcclxuICAgICAgaWYgKHJlcy5vaykge1xyXG4gICAgICAgIHJldHVybiByZXMuanNvbigpO1xyXG4gICAgICB9XHJcbiAgICAgIC8vINC10YHQu9C4INC+0YjQuNCx0LrQsCwg0L7RgtC60LvQvtC90Y/QtdC8INC/0YDQvtC80LjRgVxyXG4gICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoYNCe0YjQuNCx0LrQsDogJHtyZXMuc3RhdHVzfWApO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICAvLyEhIVVTRVIgINC/0L7Qu9GD0YfQsNC10Lwg0LTQsNC90L3Ri9C1INGBINGB0LXRgNCy0LXRgNCwINC+INC/0L7Qu9GM0LfQvtCy0LDRgtC10LvQtVxyXG4gIGdldEluaXRpYWxVc2VyKCkge1xyXG4gICAgcmV0dXJuIGZldGNoKGAke3RoaXMuX2Jhc2VVcmx9dXNlcnMvbWVgLCB7XHJcblxyXG5cclxuICAgICAgbWV0aG9kOiBcIkdFVFwiLFxyXG4gICAgICBoZWFkZXJzOiB0aGlzLl9oZWFkZXJzLFxyXG4gICAgfSkudGhlbigocmVzKSA9PiB7XHJcbiAgICAgIGlmIChyZXMub2spIHtcclxuICAgICAgICByZXR1cm4gcmVzLmpzb24oKTtcclxuICAgICAgfVxyXG4gICAgICAvLyDQtdGB0LvQuCDQvtGI0LjQsdC60LAsINC+0YLQutC70L7QvdGP0LXQvCDQv9GA0L7QvNC40YFcclxuICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KGDQntGI0LjQsdC60LA6ICR7cmVzLnN0YXR1c31gKTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcblxyXG4gIC8vISFVU0VSXHJcblxyXG4gIHBhdGNoVXNlckluZm9OYW1lQWJvdXQobmFtZSwgcHJvZmVzc2lvbikge1xyXG4gICAgcmV0dXJuIGZldGNoKGAke3RoaXMuX2Jhc2VVcmx9dXNlcnMvbWVgLCB7XHJcbiAgICAgIG1ldGhvZDogXCJQQVRDSFwiLFxyXG4gICAgICBoZWFkZXJzOiB0aGlzLl9oZWFkZXJzLFxyXG4gICAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh7XHJcbiAgICAgICAgbmFtZTogbmFtZSxcclxuICAgICAgICBhYm91dDogcHJvZmVzc2lvbixcclxuICAgICAgfSksXHJcbiAgICB9KS50aGVuKChyZXMpID0+IHtcclxuICAgICAgaWYgKHJlcy5vaykge1xyXG4gICAgICAgIHJldHVybiByZXMuanNvbigpO1xyXG4gICAgICB9XHJcbiAgICAgIC8vINC10YHQu9C4INC+0YjQuNCx0LrQsCwg0L7RgtC60LvQvtC90Y/QtdC8INC/0YDQvtC80LjRgVxyXG4gICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoYNCe0YjQuNCx0LrQsDogJHtyZXMuc3RhdHVzfWApO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBwb3N0Q2FyZChuYW1lLCBsaW5rKSB7XHJcbiAgICByZXR1cm4gZmV0Y2goYCR7dGhpcy5fYmFzZVVybH1jYXJkc2AsIHtcclxuICAgICAgbWV0aG9kOiBcIlBPU1RcIixcclxuICAgICAgaGVhZGVyczogdGhpcy5faGVhZGVycyxcclxuICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoe1xyXG4gICAgICAgIG5hbWU6IG5hbWUsXHJcbiAgICAgICAgbGluazogbGluayxcclxuICAgICAgfSksXHJcbiAgICB9KS50aGVuKChyZXMpID0+IHtcclxuICAgICAgaWYgKHJlcy5vaykge1xyXG4gICAgICAgIHJldHVybiByZXMuanNvbigpO1xyXG4gICAgICB9XHJcbiAgICAgIC8vINC10YHQu9C4INC+0YjQuNCx0LrQsCwg0L7RgtC60LvQvtC90Y/QtdC8INC/0YDQvtC80LjRgVxyXG4gICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoYNCe0YjQuNCx0LrQsDogJHtyZXMuc3RhdHVzfWApO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBkZWxldGVDYXJkKGlkKSB7XHJcbiAgICByZXR1cm4gZmV0Y2goYCR7dGhpcy5fYmFzZVVybH1jYXJkcy8ke2lkfWAsIHtcclxuICAgICAgbWV0aG9kOiBcIkRFTEVURVwiLFxyXG4gICAgICBoZWFkZXJzOiB0aGlzLl9oZWFkZXJzLFxyXG4gICAgfSkudGhlbigocmVzKSA9PiB7XHJcbiAgICAgIGlmIChyZXMub2spIHtcclxuICAgICAgICByZXR1cm4gcmVzLmpzb24oKTtcclxuICAgICAgfVxyXG4gICAgICAvLyDQtdGB0LvQuCDQvtGI0LjQsdC60LAsINC+0YLQutC70L7QvdGP0LXQvCDQv9GA0L7QvNC40YFcclxuICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KGDQntGI0LjQsdC60LA6ICR7cmVzLnN0YXR1c31gKTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcblxyXG4gIGdldE9uZUNhcmQoaWQpIHtcclxuICAgIHJldHVybiBmZXRjaChgJHt0aGlzLl9iYXNlVXJsfWNhcmRzLyR7aWR9YCwge1xyXG4gICAgICBtZXRob2Q6IFwiR0VUXCIsXHJcbiAgICAgIGhlYWRlcnM6IHRoaXMuX2hlYWRlcnMsXHJcbiAgICB9KS50aGVuKChyZXMpID0+IHtcclxuICAgICAgaWYgKHJlcy5vaykge1xyXG4gICAgICAgIHJldHVybiByZXMuanNvbigpO1xyXG4gICAgICB9XHJcbiAgICAgIC8vINC10YHQu9C4INC+0YjQuNCx0LrQsCwg0L7RgtC60LvQvtC90Y/QtdC8INC/0YDQvtC80LjRgVxyXG4gICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoYNCe0YjQuNCx0LrQsDogJHtyZXMuc3RhdHVzfWApO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuXHJcblxyXG4gIHB1dExpa2VDYXJkKGlkKSB7XHJcbiAgICByZXR1cm4gZmV0Y2goYCR7dGhpcy5fYmFzZVVybH1jYXJkcy9saWtlcy8ke2lkfWAsIHtcclxuICAgICAgbWV0aG9kOiBcIlBVVFwiLFxyXG4gICAgICBoZWFkZXJzOiB0aGlzLl9oZWFkZXJzLFxyXG4gICAgfSkudGhlbigocmVzKSA9PiB7XHJcbiAgICAgIGlmIChyZXMub2spIHtcclxuICAgICAgICByZXR1cm4gcmVzLmpzb24oKTtcclxuICAgICAgfVxyXG4gICAgICAvLyDQtdGB0LvQuCDQvtGI0LjQsdC60LAsINC+0YLQutC70L7QvdGP0LXQvCDQv9GA0L7QvNC40YFcclxuICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KGDQntGI0LjQsdC60LA6ICR7cmVzLnN0YXR1c31gKTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgZGVsZXRlTGlrZUNhcmQoaWQpIHtcclxuICAgIHJldHVybiBmZXRjaChgJHt0aGlzLl9iYXNlVXJsfWNhcmRzL2xpa2VzLyR7aWR9YCwge1xyXG4gICAgICBtZXRob2Q6IFwiREVMRVRFXCIsXHJcbiAgICAgIGhlYWRlcnM6IHRoaXMuX2hlYWRlcnMsXHJcbiAgICB9KS50aGVuKChyZXMpID0+IHtcclxuICAgICAgaWYgKHJlcy5vaykge1xyXG4gICAgICAgIHJldHVybiByZXMuanNvbigpO1xyXG4gICAgICB9XHJcbiAgICAgIC8vINC10YHQu9C4INC+0YjQuNCx0LrQsCwg0L7RgtC60LvQvtC90Y/QtdC8INC/0YDQvtC80LjRgVxyXG4gICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoYNCe0YjQuNCx0LrQsDogJHtyZXMuc3RhdHVzfWApO1xyXG4gICAgfSk7XHJcbiAgfVxyXG4vLyEhIVVTRVJcclxuICBwYXRjaEF2YXRhcihsaW5rKSB7XHJcbiAgICByZXR1cm4gZmV0Y2goYCR7dGhpcy5fYmFzZVVybH11c2Vycy9tZS9hdmF0YXJgLCB7XHJcbiAgICAgIG1ldGhvZDogXCJQQVRDSFwiLFxyXG4gICAgICBoZWFkZXJzOiB0aGlzLl9oZWFkZXJzLFxyXG4gICAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh7XHJcbiAgICAgICAgYXZhdGFyOiBsaW5rLFxyXG4gICAgICB9KSxcclxuICAgIH0pLnRoZW4oKHJlcykgPT4ge1xyXG4gICAgICBpZiAocmVzLm9rKSB7XHJcbiAgICAgICAgcmV0dXJuIHJlcy5qc29uKCk7XHJcbiAgICAgIH1cclxuICAgICAgLy8g0LXRgdC70Lgg0L7RiNC40LHQutCwLCDQvtGC0LrQu9C+0L3Rj9C10Lwg0L/RgNC+0LzQuNGBXHJcbiAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChg0J7RiNC40LHQutCwOiAke3Jlcy5zdGF0dXN9YCk7XHJcbiAgICB9KTtcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCB7IEFwaSB9O1xyXG4iLCIvL9C00LDQvdC90YvQtSDQstCw0LvQuNC00LDRhtC40LhcclxuY29uc3QgY29uZmlnVmFsaWRhdGlvbiA9IHtcclxuICBmb3JtU2VsZWN0b3I6IFwiLnBvcHVwX19jb250ZW50XCIsXHJcbiAgYnV0dG9uVmFsaWQ6IFwicG9wdXBfX3NhdmVfdmFsaWRcIixcclxuICBzdWJtaXRCdXR0b25TZWxlY3RvcjogXCIucG9wdXBfX3NhdmVcIixcclxufTtcclxuXHJcbmNvbnN0IHBvcHVwUHJvZmlsZSA9IFwiLnBvcHVwX3R5cGVfZWRpdC1wcm9maWxlXCI7XHJcbmNvbnN0IHBvcHVwQ2FyZCA9IFwiLnBvcHVwX3R5cGVfbmV3LWNhcmRcIjtcclxuY29uc3QgcG9wdXBJbWFnZSA9IFwiLnBvcHVwX3R5cGVfaW1hZ2VcIjtcclxuY29uc3QgcG9wdXBTdXJlRGVsID0gXCIucG9wdXBfdHlwZV9zdXJlLWRlbFwiO1xyXG5jb25zdCBwb3B1cENoYW5nbEF2YXRhciA9IFwiLnBvcHVwX3R5cGVfY2hhbmdsLWF2YXRhclwiO1xyXG5cclxuLy8zINCy0YHQtSDQutC90L7Qv9C60Lgg0L7RgtC60YDRi9GC0LjRjywg0LTQu9GPINCx0L7Qu9GM0YjQvtC5INC60LDRgNGC0LjQvdC60Lgg0YHQvtCx0YvRgtC40LUg0LLQtdGI0LDQtdGC0YHRjyDQvtGC0LTQtdC70YzQvdC+INC/0YDQuCDRgdC+0LfQtNCw0L3QuNC4INC60LvQsNGB0YHQsFxyXG5jb25zdCBwb3B1cEVkaXRQcm9maWxlT3BlbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIucHJvZmlsZV9fYnV0dG9uLW9wZW5cIik7XHJcbmNvbnN0IHBvcHVwTmV3Q2FyZE9wZW4gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLnByb2ZpbGVfX2J1dHRvbi1hZGQtc2l0ZVwiKTtcclxuY29uc3QgcG9wdXBDaGFuZ2xBdmF0YXJPcGVuID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5wcm9maWxlX19pbWFnZVwiKTtcclxuXHJcbi8v0L3QsNGF0L7QtNC40Lwg0L/QvtC70Y8g0L/QvtC/0LDQv9C+0LIg0LTQu9GPINCy0YHRgtCw0LLQutC4L9GB0YfQuNGC0YvQstCw0L3QuNGPINC00LDQvdC90YvRhVxyXG5jb25zdCBuYW1lUG9wdXAgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI3BvcHVwLWlucHV0LW5hbWVcIik7XHJcbmNvbnN0IHByb2Zlc3Npb25Qb3B1cCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjcG9wdXAtaW5wdXQtcHJvZmVzc2lvblwiKTtcclxuXHJcbi8v0L3QsNC50YLQuCDRjdC70LXQvNC10L3RgtGLINC90LAg0L7RgtC60YDRi9GC0L7QuSDQutCw0YDRgtC+0YfQutC1XHJcbmNvbnN0IGlucHV0RWxlbWVudFNpdGVDYXJkID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNwb3B1cC1jYXJkLWlucHV0LXNpdGVcIik7XHJcbmNvbnN0IGlucHV0RWxlbWVudFNyY0NhcmQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI3BvcHVwLWNhcmQtaW5wdXQtc3JjXCIpO1xyXG5cclxuLy/QvNC+0LkgaWQg0LTQu9GPINGB0LXRgNCy0LXRgNCwXHJcbmNvbnN0IG15SWQgPSBcImYwM2QxYTdjOTg3NmVhNGM3ZmI0ODM0MVwiO1xyXG5cclxuZXhwb3J0IHsgY29uZmlnVmFsaWRhdGlvbiB9O1xyXG5leHBvcnQge1xyXG4gIHBvcHVwUHJvZmlsZSxcclxuICBwb3B1cENhcmQsXHJcbiAgcG9wdXBJbWFnZSxcclxuICBwb3B1cEVkaXRQcm9maWxlT3BlbixcclxuICBwb3B1cE5ld0NhcmRPcGVuLFxyXG4gIHBvcHVwQ2hhbmdsQXZhdGFyT3BlbixcclxuICBwb3B1cFN1cmVEZWwsXHJcbiAgcG9wdXBDaGFuZ2xBdmF0YXIsXHJcbn07XHJcbmV4cG9ydCB7XHJcbiAgbmFtZVBvcHVwLFxyXG4gIHByb2Zlc3Npb25Qb3B1cCxcclxuICBpbnB1dEVsZW1lbnRTaXRlQ2FyZCxcclxuICBpbnB1dEVsZW1lbnRTcmNDYXJkLFxyXG4gIG15SWQsXHJcbn07XHJcbiIsIi8vMC4g0JLRgdC1INC40LzQv9C+0YDRgtGLXHJcbmltcG9ydCB7IENhcmQgfSBmcm9tIFwiLi4vY29tcG9uZW50cy9DYXJkLmpzXCI7XHJcbmltcG9ydCB7IEZvcm1WYWxpZGF0b3IgfSBmcm9tIFwiLi4vY29tcG9uZW50cy9Gb3JtVmFsaWRhdG9yLmpzXCI7XHJcbmltcG9ydCBTZWN0aW9uIGZyb20gXCIuLi9jb21wb25lbnRzL1NlY3Rpb24uanNcIjtcclxuaW1wb3J0IFBvcHVwV2l0aEZvcm0gZnJvbSBcIi4uL2NvbXBvbmVudHMvUG9wdXBXaXRoRm9ybS5qc1wiO1xyXG5pbXBvcnQgUG9wdXBXaXRoSW1hZ2UgZnJvbSBcIi4uL2NvbXBvbmVudHMvUG9wdXBXaXRoSW1hZ2UuanNcIjtcclxuaW1wb3J0IFVzZXJJbmZvIGZyb20gXCIuLi9jb21wb25lbnRzL1VzZXJJbmZvLmpzXCI7XHJcbmltcG9ydCB7IEFwaSB9IGZyb20gXCIuLi9jb21wb25lbnRzL0FwaS5qc1wiO1xyXG5cclxuLy/QstGB0LUg0L/QtdGA0LXQvNC10L3QvdGL0LVcclxuaW1wb3J0IHtcclxuICBwb3B1cFByb2ZpbGUsXHJcbiAgcG9wdXBDYXJkLFxyXG4gIHBvcHVwSW1hZ2UsXHJcbiAgcG9wdXBFZGl0UHJvZmlsZU9wZW4sXHJcbiAgcG9wdXBOZXdDYXJkT3BlbixcclxuICBwb3B1cENoYW5nbEF2YXRhck9wZW4sXHJcbn0gZnJvbSBcIi4uL3V0aWwvaW5pdGlhbENhcmRzLmpzXCI7XHJcbmltcG9ydCB7XHJcbiAgbmFtZVBvcHVwLFxyXG4gIHByb2Zlc3Npb25Qb3B1cCxcclxuICBwb3B1cFN1cmVEZWwsXHJcbiAgcG9wdXBDaGFuZ2xBdmF0YXIsXHJcbiAgbXlJZCxcclxufSBmcm9tIFwiLi4vdXRpbC9pbml0aWFsQ2FyZHMuanNcIjtcclxuXHJcbi8v0LTQsNC90L3Ri9C1INCy0LDQu9C40LTQsNGG0LjQuFxyXG5pbXBvcnQgeyBjb25maWdWYWxpZGF0aW9uIH0gZnJvbSBcIi4uL3V0aWwvaW5pdGlhbENhcmRzLmpzXCI7XHJcblxyXG4vL9C40LzQv9C+0YDRgiBDU1MgLS0gICA+PiDQtNC70Y8gV0VCUEFDS1xyXG5pbXBvcnQgXCIuL2luZGV4LmNzc1wiO1xyXG5cclxuLy/RgdC+0LfQtNCw0LXQvCDQutC70LDRgdGBINGA0LXQtNCw0LrRgtC40YDQvtCy0LDQvdC40Y8g0L/RgNC+0YTQuNC70Y9cclxuY29uc3Qgb2JqZWN0UG9wdXBQcm9maWwgPSBuZXcgUG9wdXBXaXRoRm9ybShwb3B1cFByb2ZpbGUsIHtcclxuICBoYW5kbGVGb3JtU3VibWl0OiAoeyBuYW1lLCBwcm9mZXNzaW9uIH0sIGJ1dHRvbkluZm9tYXRpb25BYm91dFNhdmUpID0+IHtcclxuICAgIC8v0LjQtyDQv9C+0L/QsNC/0LAg0L7RgtC/0YDQsNCy0LvRj9C10Lwg0L3QsCDRgdC10YDQstC10YBcclxuICAgIGNvbnN0IGluZm9ybUFib3V0U2F2ZSA9IGFwaS5wYXRjaFVzZXJJbmZvTmFtZUFib3V0KG5hbWUsIHByb2Zlc3Npb24pO1xyXG4gICAgYnV0dG9uSW5mb21hdGlvbkFib3V0U2F2ZS50ZXh0Q29udGVudCA9IFwi0KHQvtGF0YDQsNC90LXQvdC40LUuLi5cIjtcclxuICAgIGluZm9ybUFib3V0U2F2ZVxyXG4gICAgICAudGhlbigoKSA9PiB7XHJcbiAgICAgICAgLy/QuNC3INC/0L7Qv9Cw0L/QsCDQstGB0YLQsNCy0LvRj9C10Lwg0L3QsCDRgdGC0YDQsNC90LjRhtGDXHJcbiAgICAgICAgaW5jbHVkZVVzZXJJbmZvLnNldFVzZXJJbmZvKG5hbWUsIHByb2Zlc3Npb24pO1xyXG4gICAgICB9KVxyXG4gICAgICAudGhlbigoKSA9PiBvYmplY3RQb3B1cFByb2ZpbC5jbG9zZSgpKVxyXG4gICAgICAuY2F0Y2goKGVycikgPT4ge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKGVycik7IC8vINCy0YvQstC10LTQtdC8INC+0YjQuNCx0LrRgyDQsiDQutC+0L3RgdC+0LvRjFxyXG4gICAgICB9KVxyXG4gICAgICAuZmluYWxseSgoKSA9PiAoYnV0dG9uSW5mb21hdGlvbkFib3V0U2F2ZS50ZXh0Q29udGVudCA9IFwi0KHQvtGF0YDQsNC90LjRgtGMXCIpKTtcclxuICB9LFxyXG59KTtcclxuXHJcbm9iamVjdFBvcHVwUHJvZmlsLnNldEV2ZW50TGlzdGVuZXJzKCk7XHJcbi8v0YHQvtC30LTQsNC10Lwg0LrQu9Cw0YHRgSDQvtGC0L7QsdGA0LDQttC10L3QuNGPINC40L3RhNC+0YDQvNCw0YbQuNC4XHJcbmNvbnN0IGluY2x1ZGVVc2VySW5mbyA9IG5ldyBVc2VySW5mbyhcIi5wcm9maWxlX19uYW1lXCIsIFwiLnByb2ZpbGVfX3Byb2Zlc3Npb25cIik7XHJcblxyXG4vLzcg0LLQtdGI0LDQtdC8INGB0LvRg9GI0LDRgtC10LvQuCDQvdCwINC+0YLQutGA0YvRgtC40LUg0L/QvtC/0LDQv9C+0LJcclxucG9wdXBFZGl0UHJvZmlsZU9wZW4uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGZ1bmN0aW9uICgpIHtcclxuICBvYmplY3RQb3B1cFByb2ZpbC5vcGVuKCk7XHJcbiAgdmFsaWRQb3B1cFByb2ZpbGUucmVzZXRJbnB1dEVycm9yKCk7XHJcbiAgLy/RgdC+0LfQtNCw0LXQvCDRhNGD0L3QutGG0LjRjiDQt9Cw0L/QvtC70L3QuNGPINGB0L4g0YHRgtGA0LDQvdC40YbQuCDQsiDQv9C+0L/QsNC/XHJcbiAgY29uc3QgZXNlclVuZm8gPSBpbmNsdWRlVXNlckluZm8uZ2V0VXNlckluZm8oKTtcclxuICBzZXRGb3JtUHJvZmlsZShlc2VyVW5mbyk7XHJcbn0pO1xyXG5cclxuLy84LjEuMiDQtNC+0LHQsNCy0LvRj9C10YIg0LfQvdCw0YfQtdC90LjQtSDQsiDQv9C+0L/QsNC/INCf0YDQvtGE0LjQu9GMXHJcbmZ1bmN0aW9uIHNldEZvcm1Qcm9maWxlKGVzZXJVbmZvKSB7XHJcbiAgbmFtZVBvcHVwLnZhbHVlID0gZXNlclVuZm8ubmFtZVByb2ZpbGU7XHJcbiAgcHJvZmVzc2lvblBvcHVwLnZhbHVlID0gZXNlclVuZm8ucHJvZmVzc2lvblByb2ZpbGU7XHJcbn1cclxuXHJcbi8v0YHQvtC30LTQsNC90LjQtSDQutCw0YDRgtC+0YfQutC4INC/0L7Qv9Cw0L/QsCDQtNC+0LHQsNCy0LvQtdC90LjRjyDQutCw0YDRgtC+0YfQutC4XHJcbmNvbnN0IG9iamVjdFBvcHVwQ2FyZCA9IG5ldyBQb3B1cFdpdGhGb3JtKHBvcHVwQ2FyZCwge1xyXG4gIGhhbmRsZUZvcm1TdWJtaXQ6ICh7IG5hbWUsIGxpbmsgfSwgYnV0dG9uSW5mb21hdGlvbkFib3V0U2F2ZSkgPT4ge1xyXG4gICAgYnV0dG9uSW5mb21hdGlvbkFib3V0U2F2ZS50ZXh0Q29udGVudCA9IFwi0KHQvtGF0YDQsNC90LXQvdC40LUuLi5cIjtcclxuICAgIGNvbnN0IHNpdGVWYWx1ZSA9IG5hbWU7IC8vMS7QktC30Y/RgtGMINGB0YLRgNC+0LrRgyDQuNC3INC40L3Qv9GD0YLQsFxyXG4gICAgY29uc3Qgc3JjVmFsdWUgPSBsaW5rOyAvLzIuINCS0LfRj9GC0Ywg0YHRgdGL0LvQutGDINC40Lcg0LjQvdC/0YPRgtCwXHJcblxyXG4gICAgLy/QntGC0L/RgNCw0LLQu9GP0LXQvCDQvdCwINGB0LXRgNCy0LXRgCDQtNCw0L3QvdGL0LUg0YEg0L3QvtCy0L7QuSDQutCw0YDRgtC+0YfQutC4XHJcbiAgICBjb25zdCBhZGRPbmVDYXJkRnJvbUFwaSA9IGFwaS5wb3N0Q2FyZChzaXRlVmFsdWUsIHNyY1ZhbHVlKTtcclxuXHJcbiAgICAvL9Ca0L7Qu9Cx0LXQuiDQtNCw0L3QvdGL0YUg0YEg0LTQvtCx0LDQstC70LXQvdC90L7QuSDQutCw0YDRgtC+0YfQutC4INCy0YHRgtCw0LLQu9GP0LXQvCDQvdCwINGB0YLRgNCw0L3QuNGG0YNcclxuICAgIGFkZE9uZUNhcmRGcm9tQXBpXHJcbiAgICAgIC50aGVuKChkYXRhKSA9PiB7XHJcbiAgICAgICAgLy/RgNC10L3QtNC10YDQuNC8INC+0LHRidC10Lkg0YTRg9C90LrRhtC40LXQuVxyXG4gICAgICAgIGNvbnN0IGNhcmQgPSByZW5kZXJDYXJkKFxyXG4gICAgICAgICAgZGF0YS5uYW1lLFxyXG4gICAgICAgICAgZGF0YS5saW5rLFxyXG4gICAgICAgICAgZGF0YS5saWtlcyxcclxuICAgICAgICAgIGRhdGEub3duZXIsXHJcbiAgICAgICAgICBkYXRhLl9pZCxcclxuICAgICAgICAgIGFwaVxyXG4gICAgICAgICk7XHJcbiAgICAgICAgcmVuZGVyT25lQ2FyZC5zZXRJdGVtKGNhcmQpOyAvL9C+0YIg0LrQu9Cw0YHRgdCwIFNlY3Rpb25cclxuICAgICAgICB2YWxpZFBvcHVwQ2FyZC50b2dnbGVCdXR0b25TdGF0ZU9mZigpO1xyXG4gICAgICB9KVxyXG4gICAgICAudGhlbigoKSA9PiBvYmplY3RQb3B1cENhcmQuY2xvc2UoKSlcclxuICAgICAgLmNhdGNoKChlcnIpID0+IHtcclxuICAgICAgICBjb25zb2xlLmxvZyhlcnIpOyAvLyDQstGL0LLQtdC00LXQvCDQvtGI0LjQsdC60YMg0LIg0LrQvtC90YHQvtC70YxcclxuICAgICAgfSlcclxuICAgICAgLmZpbmFsbHkoKCkgPT4gKGJ1dHRvbkluZm9tYXRpb25BYm91dFNhdmUudGV4dENvbnRlbnQgPSBcItCh0L7RhdGA0LDQvdC40YLRjFwiKSk7XHJcbiAgfSxcclxufSk7XHJcbm9iamVjdFBvcHVwQ2FyZC5zZXRFdmVudExpc3RlbmVycygpO1xyXG5cclxuLy/QodC70YPRiNCw0YLQtdC70Ywg0L/QvtC/0LDQv9CwINC00L7QsdCw0LLQu9C10LjRjyDQutCw0YDRgtC+0YfQutC4XHJcbnBvcHVwTmV3Q2FyZE9wZW4uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGZ1bmN0aW9uICgpIHtcclxuICBvYmplY3RQb3B1cENhcmQub3BlbigpO1xyXG4gIHZhbGlkUG9wdXBDYXJkLnJlc2V0SW5wdXRFcnJvcigpO1xyXG59KTtcclxuXHJcbi8v0L7RgtC60YDRi9GC0LjQtSDQsdC+0LvRjNGI0L7Qs9C+INC/0L7Qv9Cw0L/QsFxyXG5jb25zdCBvYmplY3Rwb3B1cEltYWdlID0gbmV3IFBvcHVwV2l0aEltYWdlKHBvcHVwSW1hZ2UpO1xyXG5vYmplY3Rwb3B1cEltYWdlLnNldEV2ZW50TGlzdGVuZXJzKCk7XHJcblxyXG4vL9C/0LXRgNC10LTQsNC10Lwg0LrQvtC70LHQtdC6INC60LvQuNC60LAg0LTQu9GPINC+0YLQutGA0YvRgtC40Y8g0LHQvtC70YzRiNC+0Lkg0LrQsNGA0YLQvtGH0LrQuFxyXG5mdW5jdGlvbiBoYW5kbGVDYXJkQ2xpY2sobmFtZSwgbGluaykge1xyXG4gIG9iamVjdHBvcHVwSW1hZ2Uub3BlbihuYW1lLCBsaW5rKTtcclxufVxyXG5cclxuLy/RgdC+0LfQtNCw0LXQvCDQutC+0LvQsdC10Log0LrQu9C40LrQsCDQtNC70Y8g0L7RgtC60YDRi9GC0LjRjyDQv9C+0L/QsNC/0LAg0LTQu9GPINC/0L7QtNGC0LLQtdGA0LbQtNC10L3QuNGPINGD0LTQsNC70LXQvdC40Y9cclxubGV0IGRhdGFTdWJtaXRFbGVtZW50T25EZWxsO1xyXG5cclxuZnVuY3Rpb24gaGFuZGxlQ2xpY2tEZWxDYXJkKGlkLCBlbGVtZW50LCBkZWxldGVDc3JkT25TaXRlKSB7ICBcclxuICBvYmplY3Rwb3B1cFN1cmVEZWwub3BlbigpO1xyXG4gIG9iamVjdHBvcHVwU3VyZURlbC5zZXRTdWJtaXRBdGlvbihkZWxldGVDc3JkT25TaXRlKTsgLy9j0L/QtdGA0LXQtNCw0YfQsCDQutC+0LvQsdC10LrQsCDQuNC3INC60LvQsNGB0YHQsCBjYXJkXHJcblxyXG4gIHJldHVybiAoZGF0YVN1Ym1pdEVsZW1lbnRPbkRlbGwgPSB7XHJcbiAgICBpZDogaWQsXHJcbiAgICBlbGVtZW50OiBlbGVtZW50LFxyXG4gIH0pO1xyXG59XHJcblxyXG4vL9GE0YPQvdC60YbQuNGPINGA0LDQsdC+0YLRiyDRgSDQu9Cw0LnQutCw0LzQuCAo0LTQsNC90L3Ri9C1INC/0YDQuCDQt9Cw0LPRgNGD0LfQutC1INGC0YPRgiDQvdC1INC+0YLRgNCw0LHQsNGC0YvQstCw0Y7RgtGB0Y8pXHJcbmZ1bmN0aW9uIGhhbmRsZUNhcmRDbGlja0hlYXJ0KGlkQ2FyZCwgc3RhdHVzLCBlbGVtZW50KSB7XHJcbiAgaWYgKHRoaXMuX2xpa2VTdGF0dXMuc3RhdHVzID09IGZhbHNlKSB7XHJcbiAgICBhcGlcclxuICAgICAgLnB1dExpa2VDYXJkKGlkQ2FyZClcclxuICAgICAgLnRoZW4oKHJlcykgPT4ge1xyXG4gICAgICAgIHJldHVybiByZXMubGlrZXMubGVuZ3RoO1xyXG4gICAgICB9KVxyXG4gICAgICAudGhlbigocmVzKSA9PiB7XHJcbiAgICAgICAgZWxlbWVudC5xdWVyeVNlbGVjdG9yKFwiLmVsZW1lbnRzX19ob3ctbGlrZVwiKS50ZXh0Q29udGVudCA9IHJlcztcclxuICAgICAgfSk7XHJcbiAgfSBlbHNlIHtcclxuICAgIGFwaVxyXG4gICAgICAuZGVsZXRlTGlrZUNhcmQoaWRDYXJkKVxyXG4gICAgICAudGhlbigocmVzKSA9PiB7XHJcbiAgICAgICAgcmV0dXJuIHJlcy5saWtlcy5sZW5ndGg7XHJcbiAgICAgIH0pXHJcbiAgICAgIC50aGVuKChyZXMpID0+IHtcclxuICAgICAgICBlbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuZWxlbWVudHNfX2hvdy1saWtlXCIpLnRleHRDb250ZW50ID0gcmVzO1xyXG4gICAgICB9KTtcclxuICB9XHJcbn1cclxuXHJcbi8v0L7RgtC60YDRi9GC0LjQtSDQv9C+0L/QsNC/0LAg0YHQvtCz0LvQsNGB0LjRjyDRg9C00LDQu9C10L3QuNGPIHBvcHVwU3VyZURlbFxyXG5jb25zdCBvYmplY3Rwb3B1cFN1cmVEZWwgPSBuZXcgUG9wdXBXaXRoRm9ybShwb3B1cFN1cmVEZWwsIHtcclxuICBoYW5kbGVGb3JtU3VibWl0OiAoYSwgZCwgaGFuZGxlU3VibWl0Q2FsbEJhY2spID0+IHtcclxuICAgIFxyXG4gICAgYXBpXHJcbiAgICAgIC5kZWxldGVDYXJkKGRhdGFTdWJtaXRFbGVtZW50T25EZWxsLmlkKVxyXG4gICAgICAudGhlbigoKSA9PiBoYW5kbGVTdWJtaXRDYWxsQmFjayhkYXRhU3VibWl0RWxlbWVudE9uRGVsbC5lbGVtZW50KSkgLy/QtNC70Y8g0L/RgNC+0LrQuNC00YvQstCw0L3QuNGPINGE0YPQvdC60YbQuNC4INC40LcgY2FyZFxyXG4gICAgICAudGhlbigoKSA9PiBvYmplY3Rwb3B1cFN1cmVEZWwuY2xvc2UoKSlcclxuICAgICAgLmNhdGNoKChlcnIpID0+IHtcclxuICAgICAgICBjb25zb2xlLmxvZyhlcnIpOyAvLyDQstGL0LLQtdC00LXQvCDQvtGI0LjQsdC60YMg0LIg0LrQvtC90YHQvtC70YxcclxuICAgICAgfSk7XHJcbiAgfSxcclxufSk7XHJcbm9iamVjdHBvcHVwU3VyZURlbC5zZXRFdmVudExpc3RlbmVycygpO1xyXG4vL29iamVjdHBvcHVwU3VyZURlbC5vcGVuKCk7XHJcblxyXG4vL9Cy0LXRiNCw0LXQvCDQutC70LjQuiDQvtGC0LrRgNGL0YLQuNGPINC/0L7Qv9Cw0L/QsCDQv9GA0Lgg0L3QsNC20LDRgtC40Lgg0L3QsCDQutCw0YDRgtC40L3QutGDXHJcbnBvcHVwQ2hhbmdsQXZhdGFyT3Blbi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgZnVuY3Rpb24gKCkge1xyXG4gIG9iamVjdHBvcHVwQ2hhbmdsQXZhdGFyLm9wZW4oKTtcclxuICB2YWxpZFBvcHVwQ2hhbmdsQXZhdGFyLnJlc2V0SW5wdXRFcnJvcigpO1xyXG59KTtcclxuXHJcbi8v0L7RgtC60YDRi9GC0LjQtSDQv9C+0L/QsNC/0LAg0LTQu9GPINC30LDQvNC10L3RiyDRhNC+0YLQvtCz0YDQsNGE0LjQuCDQsNCy0LDRgtCw0YDQsFxyXG5jb25zdCBvYmplY3Rwb3B1cENoYW5nbEF2YXRhciA9IG5ldyBQb3B1cFdpdGhGb3JtKHBvcHVwQ2hhbmdsQXZhdGFyLCB7XHJcbiAgaGFuZGxlRm9ybVN1Ym1pdDogKHsgbGluayB9LCBidXR0b25JbmZvbWF0aW9uQWJvdXRTYXZlKSA9PiB7XHJcbiAgICBidXR0b25JbmZvbWF0aW9uQWJvdXRTYXZlLnRleHRDb250ZW50ID0gXCLQodC+0YXRgNCw0L3QtdC90LjQtS4uLlwiO1xyXG5cclxuICAgIGNvbnN0IHNyY1ZhbHVlID0gbGluaztcclxuICAgIGFwaVxyXG4gICAgICAucGF0Y2hBdmF0YXIobGluaylcclxuICAgICAgLy8udGhlbigoKSA9PiAoZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5wcm9maWxlX19pbWFnZVwiKS5zcmMgPSBsaW5rKSlcclxuICAgICAgLnRoZW4oKCkgPT4gaW5jbHVkZVVzZXJJbmZvLnNldFVzZXJBdmF0YXIobGluaykpXHJcbiAgICAgIC50aGVuKCgpID0+IHtcclxuICAgICAgICB2YWxpZFBvcHVwQ2hhbmdsQXZhdGFyLnRvZ2dsZUJ1dHRvblN0YXRlT2ZmKCk7XHJcblxyXG4gICAgICAgIG9iamVjdHBvcHVwQ2hhbmdsQXZhdGFyLmNsb3NlKCk7XHJcbiAgICAgIH0pXHJcblxyXG4gICAgICAuY2F0Y2goKGVycikgPT4ge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKGVycik7IC8vINCy0YvQstC10LTQtdC8INC+0YjQuNCx0LrRgyDQsiDQutC+0L3RgdC+0LvRjFxyXG4gICAgICB9KVxyXG4gICAgICAuZmluYWxseSgoKSA9PiAoYnV0dG9uSW5mb21hdGlvbkFib3V0U2F2ZS50ZXh0Q29udGVudCA9IFwi0KHQvtGF0YDQsNC90LjRgtGMXCIpKTsgICAgXHJcbiAgfSxcclxufSk7XHJcbm9iamVjdHBvcHVwQ2hhbmdsQXZhdGFyLnNldEV2ZW50TGlzdGVuZXJzKCk7XHJcblxyXG4vLzcg0LLQsNC70LjQtNCw0YbQuNGPXHJcbmNvbnN0IHZhbGlkUG9wdXBQcm9maWxlID0gbmV3IEZvcm1WYWxpZGF0b3IoY29uZmlnVmFsaWRhdGlvbiwgcG9wdXBQcm9maWxlKTtcclxudmFsaWRQb3B1cFByb2ZpbGUuZW5hYmxlVmFsaWRhdGlvbigpO1xyXG4vLzcg0LLQsNC70LjQtNCw0YbQuNGPXHJcbmNvbnN0IHZhbGlkUG9wdXBDYXJkID0gbmV3IEZvcm1WYWxpZGF0b3IoY29uZmlnVmFsaWRhdGlvbiwgcG9wdXBDYXJkKTtcclxudmFsaWRQb3B1cENhcmQuZW5hYmxlVmFsaWRhdGlvbigpO1xyXG4vLzkg0YHQvtC30LTQsNC10Lwg0LvQvtC20L3Rg9GOINCy0LDQu9C40LTQsNGG0LjRjiDQtNC70Y8g0L/QvtC/0LDQv9CwXHJcbmNvbnN0IHZhbGlkUG9wdXBTdXJlRGVsID0gbmV3IEZvcm1WYWxpZGF0b3IoY29uZmlnVmFsaWRhdGlvbiwgcG9wdXBTdXJlRGVsKTtcclxudmFsaWRQb3B1cFN1cmVEZWwuZW5hYmxlVmFsaWRhdGlvbigpO1xyXG52YWxpZFBvcHVwU3VyZURlbC50b2dnbGVCdXR0b25TdGF0ZU9uKCk7XHJcbi8vOdGB0L7Qt9C00LDQtdC8INCy0LDQu9C40LTQsNGG0LjRjiDQuNC30LzQtdC90LXQvdC40Y8g0LDQstCw0YLQsNGA0LBcclxuY29uc3QgdmFsaWRQb3B1cENoYW5nbEF2YXRhciA9IG5ldyBGb3JtVmFsaWRhdG9yKFxyXG4gIGNvbmZpZ1ZhbGlkYXRpb24sXHJcbiAgcG9wdXBDaGFuZ2xBdmF0YXJcclxuKTtcclxudmFsaWRQb3B1cENoYW5nbEF2YXRhci5lbmFibGVWYWxpZGF0aW9uKCk7XHJcblxyXG4vL9GB0L7Qt9C00LDQtdC8INC/0YPRgdGC0L7QuSDQvtCx0YrQtdC60YIg0LTQu9GPINGD0LTQsNC70LXQvdC40Y9cclxuY29uc3QgY2FyZERlbGwgPSBuZXcgQ2FyZCgpO1xyXG5cclxuLy/RhNGD0L3QutGG0LjRjyDQtNC70Y8g0L7RgtGA0LjRgdC+0LLQutC4INC60LDRgNGC0L7Rh9C60LhcclxuZnVuY3Rpb24gcmVuZGVyQ2FyZChuYW1lLCBsaW5rLCBsaWtlcywgb3duZXIsIF9pZCwgYXBpKSB7XHJcbiAgY29uc3QgY2FyZCA9IG5ldyBDYXJkKFxyXG4gICAgbmFtZSxcclxuICAgIGxpbmssXHJcbiAgICBsaWtlcyxcclxuICAgIG93bmVyLFxyXG4gICAgX2lkLFxyXG4gICAgYXBpLFxyXG4gICAgbXlJZCxcclxuICAgIGhhbmRsZUNhcmRDbGljayxcclxuICAgIGhhbmRsZUNsaWNrRGVsQ2FyZCxcclxuICAgIGhhbmRsZUNhcmRDbGlja0hlYXJ0IC8v0L7Qv9GA0LXQtNC10LvRj9C10YIg0LXRgdGC0Ywg0LvQuCDQvNC+0Lkg0LvQsNC50Log0Lgg0YPQsdC40YDQsNC10YIg0LXQs9C+INC40LvQuCDQtNC+0LHQsNCy0LvRj9C10YJcclxuICApO1xyXG5cclxuICByZXR1cm4gY2FyZC5nZW5lcmF0ZUNhcmQoKTtcclxufVxyXG5cclxuLy84INC+0YLRgNC40YHQvtCy0LrQsCDQutCw0YDRgtC+0YfQtdC6INC40Lcg0LzQsNGB0YHQuNCy0LBcclxuY29uc3Qgc2VsZWN0b3IgPSBcIi5lbGVtZW50c19faXRlbVwiOyAvLyAtLTw8INGN0YLQviDQv9Cw0YDQsNC80LXRgtGAINC60YPQtNCwINCy0YHRgtCw0LLQu9GP0YLRjCDRgNCw0LfQvNC10YLQutGDXHJcblxyXG4vL9C+0YLRgNC40YHQvtCy0LrQsCAx0Lkg0LrQsNGA0YLQvtGH0LrQuFxyXG5jb25zdCByZW5kZXJPbmVDYXJkID0gbmV3IFNlY3Rpb24oe30sIHNlbGVjdG9yKTtcclxuXHJcbi8vYXBpINC00LvRjyDQt9Cw0LPRgNGD0LfQutC4INC00LDQvdC90YvRhSDQviDQv9C+0LvRjNC30L7QstCw0YLQtdC70LVcclxuY29uc3QgYXBpID0gbmV3IEFwaSh7XHJcbiAgYmFzZVVybDogXCJodHRwczovL21lc3RvLm5vbW9yZXBhcnRpZXMuY28vdjEvY29ob3J0LTQxL1wiLCAvL1xyXG4gIGhlYWRlcnM6IHtcclxuICAgIGF1dGhvcml6YXRpb246IFwiMDY5NTBjODctZjM0OS00NTJkLWE2YmQtZTUyMzkzMTIwOWFjXCIsXHJcbiAgICBcIkNvbnRlbnQtVHlwZVwiOiBcImFwcGxpY2F0aW9uL2pzb25cIixcclxuICB9LFxyXG59KTtcclxuXHJcblByb21pc2UuYWxsKFtcclxuICAvL9CyIFByb21pc2UuYWxsINC/0LXRgNC10LTQsNC10Lwg0LzQsNGB0YHQuNCyINC/0YDQvtC80LjRgdC+0LIg0LrQvtGC0L7RgNGL0LUg0L3Rg9C20L3QviDQstGL0L/QvtC70L3QuNGC0YxcclxuXHJcbiAgYXBpLmdldEluaXRpYWxVc2VyKCksXHJcblxyXG4gIGFwaS5nZXRJbml0aWFsQ2FyZHMoKSxcclxuXSlcclxuICAudGhlbigoW3VzZXJJbmZvLCBpbml0aWFsQ2FyZHNdKSA9PiB7XHJcbiAgICAvL9GD0YHRgtCw0L3QvtCy0LrQsCDQtNCw0L3QvdGL0YUg0L4g0L/QvtC70YzQt9C+0LLQsNGC0LXQu9C1INC90LAg0YHRgtGA0LDQvdC40YbRgyArINGE0L7RgtC+XHJcbiAgICBpbmNsdWRlVXNlckluZm8uc2V0VXNlckluZm8odXNlckluZm8ubmFtZSwgdXNlckluZm8uYWJvdXQpO1xyXG4gICAgaW5jbHVkZVVzZXJJbmZvLnNldFVzZXJBdmF0YXIodXNlckluZm8uYXZhdGFyKTtcclxuXHJcbiAgICAvL9GB0L7QsdC40YDQsNC10Lwg0YEg0YHQtdGA0LLQtdGA0LAg0LPQvtGC0L7QstGL0LUg0LrQsNGA0YLQvtGH0LrQuFxyXG4gICAgY29uc3QgY2FyZExpc3QgPSBuZXcgU2VjdGlvbihcclxuICAgICAge1xyXG4gICAgICAgIC8vaXRlbXM6IGRhdGEsXHJcbiAgICAgICAgcmVuZGVyZXI6IChpdGVtKSA9PiB7XHJcbiAgICAgICAgICBjb25zdCBjYXJkID0gcmVuZGVyQ2FyZChcclxuICAgICAgICAgICAgLy/Qv9C+0LTQs9C+0YLQsNCy0LvQuNCy0LDRjiDRjdC70LXQvNC10L0g0LjQtyDQtNCw0L3QvdGL0YUsINGD0YHRgtCw0L3QsNCy0LvQuNCy0LDRjiDRgdC70YPRiNCw0YLQtdC70YxcclxuICAgICAgICAgICAgaXRlbS5uYW1lLFxyXG4gICAgICAgICAgICBpdGVtLmxpbmssXHJcbiAgICAgICAgICAgIGl0ZW0ubGlrZXMsXHJcbiAgICAgICAgICAgIGl0ZW0ub3duZXIsXHJcbiAgICAgICAgICAgIGl0ZW0uX2lkLFxyXG4gICAgICAgICAgICBhcGlcclxuICAgICAgICAgICk7XHJcbiAgICAgICAgICBjYXJkTGlzdC5zZXRJdGVtKGNhcmQpOyAvL9Cy0YHRgtCw0LLQu9GP0Y4g0L7QsdGA0LDQsdC+0YLQsNC90L3Ri9C1INGN0LvQtdC80LXQvdGC0Ysg0LrQsNGA0YLQvtGH0LXQuiDQvdCwINGB0LDQudGCXHJcbiAgICAgICAgfSxcclxuICAgICAgfSxcclxuICAgICAgc2VsZWN0b3JcclxuICAgICk7XHJcbiAgICAvLyDQt9Cw0L/Rg9GB0Log0L7RgtGA0LjRgdC+0LLQutC4INC60LDRgNGC0L7Rh9C10Log0LjQtyDQvNCw0YHRgdC40LLQsFxyXG4gICAgY2FyZExpc3QucmVuZGVySXRlbXMoaW5pdGlhbENhcmRzKTsgLy/Qv9C10YDQtdC00LDRjiDQvdCw0L/RgNGP0LzRg9GOINC80LDRgdGB0LjQsiDRgSDQtNCw0L3QvdGL0LzQuCDQutCw0YDRgtC+0YfQtdC6XHJcbiAgfSlcclxuICAuY2F0Y2goKGVycikgPT4ge1xyXG4gICAgY29uc29sZS5sb2coZXJyKTsgLy8g0LLRi9Cy0LXQtNC10Lwg0L7RiNC40LHQutGDINCyINC60L7QvdGB0L7Qu9GMXHJcbiAgfSk7IC8v0YLQsNC6INC60LDQuiDRjdGC0L4g0L/RgNC+0LzQuNGBINC/0YDQvtC00L7Qu9C20LDQtdC8INGB0YLQstCw0LLQuNGC0Ywg0JLQldCdO1xyXG4iXSwibmFtZXMiOlsiQ2FyZCIsIm5hbWUiLCJsaW5rIiwibGlrZXMiLCJvd25lciIsIl9pZCIsImFwaSIsIm15SWQiLCJoYW5kbGVDYXJkQ2xpY2siLCJoYW5kbGVDbGlja0RlbENhcmQiLCJoYW5kbGVDYXJkQ2xpY2tIZWFydCIsInRoaXMiLCJfbmFtZSIsIl9saW5rIiwiX2xpa2VzIiwiX293bmVyIiwiX19pZCIsIl9hcGkiLCJfaGFuZGxlWm9vbSIsIl9teUlkIiwiX2hhbmRsZUNsaWNrRGVsQ2FyZCIsIl9oYW5kbGVDYXJkQ2xpY2tIZWFydCIsIl9saWtlU3RhdHVzIiwic3RhdHVzIiwiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yIiwiY29udGVudCIsImNsb25lTm9kZSIsImxlbmd0aCIsIl9lbGVtZW50IiwidGV4dENvbnRlbnQiLCJfZ2V0VGVtcGxhdGUiLCJfc2V0RXZlbnRMaXN0ZW5lcnMiLCJzcmMiLCJhbHQiLCJjbGFzc0xpc3QiLCJhZGQiLCJzZXRUaGVOdW1iZXJPZkxpa2VzIiwiZmluZEluZGV4IiwiaXRlbSIsImV2dCIsInRhcmdldCIsInRvZ2dsZSIsImNhcmQiLCJyZW1vdmUiLCJkZWxldGVDc3JkT25TaXRlIiwiYWRkRXZlbnRMaXN0ZW5lciIsIl9oYW5kbGVNZXNzZWdlQ2xpY2siLCJfZWxlbWVudERlbGV0ZSIsImV2ZSIsIkZvcm1WYWxpZGF0b3IiLCJjb25maWdWYWxpZGF0aW9uIiwicG9wdXAiLCJldmVudCIsImZvcm0iLCJjdXJyZW50VGFyZ2V0IiwiaW5wdXQiLCJfc2V0Q3VzdG9tRXJyb3IiLCJfc2V0RmllbGRFcnJvciIsIl90b2dnbGVCdXR0b25TdGF0ZSIsIl9zdWJtaXRCdXR0b24iLCJfYnV0dG9uVmFsaWQiLCJyZW1vdmVBdHRyaWJ1dGUiLCJzZXRBdHRyaWJ1dGUiLCJjaGVja1ZhbGlkaXR5IiwidG9nZ2xlQnV0dG9uU3RhdGVPbiIsInRvZ2dsZUJ1dHRvblN0YXRlT2ZmIiwiX2Zvcm1TZWxlY3RvciIsImZvcm1TZWxlY3RvciIsImJ1dHRvblZhbGlkIiwiX3BvcHVwIiwic3VibWl0QnV0dG9uU2VsZWN0b3IiLCJfcG9wdXBDb250ZW50IiwicHJldmVudERlZmF1bHQiLCJfaGFuZGxlRm9ybUlucHV0IiwidmFsaWRpdHkiLCJzZXRDdXN0b21WYWxpZGl0eSIsImlkIiwidmFsaWRhdGlvbk1lc3NhZ2UiLCJfc3Bhbk9uUG9wdXAiLCJxdWVyeVNlbGVjdG9yQWxsIiwiZm9yRWFjaCIsIml0ZW1zIiwiU2VjdGlvbiIsInNlbGVjdG9yIiwicmVuZGVyZXIiLCJfcmVuZGVyZXIiLCJfY29udGFpbmVyIiwiZWxlbWVudCIsInByZXBlbmQiLCJQb3B1cCIsInNlbGVjdG9yUG9wdXAiLCJrZXkiLCJjbG9zZSIsIl9oYW5kbGVFc2NDbG9zZSIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJfcG9wdXBDbG9zZSIsImNvbnRhaW5zIiwiUG9wdXBXaXRoRm9ybSIsImhhbmRsZUZvcm1TdWJtaXQiLCJfaGFuZGxlRm9ybVN1Ym1pdCIsIl9mb3JtTGlzdCIsIl9mb3JtVmFsdWVzIiwidmFsdWUiLCJzdWJtaXRBY3Rpb24iLCJfaGFuZGxlU3VibWl0Q2FsbEJhY2siLCJfcG9wdXBGb3JtU3VibWl0IiwiX2J1dHRvbkluZm9tYXRpb25BYm91dFNhdmUiLCJfZ2V0SW5wdXRWYWx1ZXMiLCJyZXNldCIsIlBvcHVwV2l0aEltYWdlIiwiX3NpemVFbGVtZW50VGV4dCIsIl9zaXplRWxlbWVudEltZyIsIlVzZXJJbmZvIiwibmFtZVNlbGVjdG9yIiwicHJvZmVzc2lvblNlbGVjdG9yIiwiX3Byb2Zlc3Npb25TZWxlY3RvciIsIl9uYW1lUG9wdXAiLCJfcHJvZmVzc2lvblBvcHVwIiwiX2F2YXRhciIsIm5hbWVQcm9maWxlIiwicHJvZmVzc2lvblByb2ZpbGUiLCJuYW1lUG9wdXAiLCJwcm9mZXNzaW9uUG9wdXAiLCJhdmF0YXIiLCJBcGkiLCJjb25maWciLCJfYmFzZVVybCIsImJhc2VVcmwiLCJfaGVhZGVycyIsImhlYWRlcnMiLCJmZXRjaCIsIm1ldGhvZCIsInRoZW4iLCJyZXMiLCJvayIsImpzb24iLCJQcm9taXNlIiwicmVqZWN0IiwicHJvZmVzc2lvbiIsImJvZHkiLCJKU09OIiwic3RyaW5naWZ5IiwiYWJvdXQiLCJwb3B1cFByb2ZpbGUiLCJwb3B1cENhcmQiLCJwb3B1cFN1cmVEZWwiLCJwb3B1cENoYW5nbEF2YXRhciIsInBvcHVwRWRpdFByb2ZpbGVPcGVuIiwicG9wdXBOZXdDYXJkT3BlbiIsInBvcHVwQ2hhbmdsQXZhdGFyT3BlbiIsIm9iamVjdFBvcHVwUHJvZmlsIiwiYnV0dG9uSW5mb21hdGlvbkFib3V0U2F2ZSIsImluZm9ybUFib3V0U2F2ZSIsInBhdGNoVXNlckluZm9OYW1lQWJvdXQiLCJpbmNsdWRlVXNlckluZm8iLCJzZXRVc2VySW5mbyIsImNhdGNoIiwiZXJyIiwiY29uc29sZSIsImxvZyIsImZpbmFsbHkiLCJzZXRFdmVudExpc3RlbmVycyIsImVzZXJVbmZvIiwib3BlbiIsInZhbGlkUG9wdXBQcm9maWxlIiwicmVzZXRJbnB1dEVycm9yIiwiZ2V0VXNlckluZm8iLCJvYmplY3RQb3B1cENhcmQiLCJzaXRlVmFsdWUiLCJzcmNWYWx1ZSIsInBvc3RDYXJkIiwiZGF0YSIsInJlbmRlckNhcmQiLCJyZW5kZXJPbmVDYXJkIiwic2V0SXRlbSIsInZhbGlkUG9wdXBDYXJkIiwiZGF0YVN1Ym1pdEVsZW1lbnRPbkRlbGwiLCJvYmplY3Rwb3B1cEltYWdlIiwib2JqZWN0cG9wdXBTdXJlRGVsIiwic2V0U3VibWl0QXRpb24iLCJpZENhcmQiLCJwdXRMaWtlQ2FyZCIsImRlbGV0ZUxpa2VDYXJkIiwiYSIsImQiLCJoYW5kbGVTdWJtaXRDYWxsQmFjayIsImRlbGV0ZUNhcmQiLCJvYmplY3Rwb3B1cENoYW5nbEF2YXRhciIsInZhbGlkUG9wdXBDaGFuZ2xBdmF0YXIiLCJwYXRjaEF2YXRhciIsInNldFVzZXJBdmF0YXIiLCJlbmFibGVWYWxpZGF0aW9uIiwidmFsaWRQb3B1cFN1cmVEZWwiLCJnZW5lcmF0ZUNhcmQiLCJhdXRob3JpemF0aW9uIiwiYWxsIiwiZ2V0SW5pdGlhbFVzZXIiLCJnZXRJbml0aWFsQ2FyZHMiLCJ1c2VySW5mbyIsImluaXRpYWxDYXJkcyIsImNhcmRMaXN0IiwicmVuZGVySXRlbXMiXSwic291cmNlUm9vdCI6IiJ9